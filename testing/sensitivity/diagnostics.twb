<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8000.13.0712.1936                -->
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource caption='gluc.sensitivity.eb-sens' inline='true' name='postgres.41507.320894097225' version='8.1'>
      <connection class='postgres' dbname='gluc' port='5432' server='dn001-bde.nrel.gov' username='bbush'>
        <relation name='abstract' table='[sensitivity].[abstract]' type='table' />
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[C]' role='dimension' type='ordinal'>
      </column>
      <column caption='Product' datatype='string' name='[Calculation_1620826081443251]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF STARTSWITH([Variable], &apos;Commodity &apos;) OR STARTSWITH([Variable], &apos;commodity &apos;) OR STARTSWITH([Variable], &apos;direct commodity &apos;) OR STARTSWITH([Variable], &apos;net commodity &apos;) OR STARTSWITH([Variable], &apos;AP commodity &apos;)&#13;&#10;  THEN &apos;Commodity&apos;&#13;&#10;ELSEIF STARTSWITH([Variable], &apos;Animal &apos;) OR STARTSWITH([Variable], &apos;AP &apos;) OR STARTSWITH([Variable], &apos;animal product &apos;)&#13;&#10;  THEN &apos;Animal&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Inventory [Gg]' datatype='real' name='[Calculation_6860826155650891]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ENDSWITH([Variable], &apos; Inventory&apos;)&#13;&#10;  THEN [Value]&#13;&#10;END' />
      </column>
      <column caption='Shortfall [Gg/yr]' datatype='real' name='[Calculation_7000826081938462]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ENDSWITH([Variable], &apos; demand&apos;)&#13;&#10;  THEN [Value]&#13;&#10;ELSEIF ENDSWITH([Variable], &apos; consn&apos;)&#13;&#10;  THEN - [Value]&#13;&#10;END' />
      </column>
      <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
      </column>
      <column caption='Coverage [yr]' datatype='real' name='[Calculation_9900826155823147]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Calculation_6860826155650891]) / SUM([Calculation_9950826155736741])' />
      </column>
      <column caption='Production [Gg/yr]' datatype='real' name='[Calculation_9950826155736741]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ENDSWITH([Variable], &apos; production&apos;)&#13;&#10;  THEN [Value]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
      </column>
      <column caption='Flow [Gg/yr]' datatype='real' name='[Shortfall [Gg/yr]] (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ENDSWITH([Variable], &apos;consn&apos;) OR ENDSWITH([Variable], &apos;export&apos;)&#13;&#10;  THEN - [Value]&#13;&#10;ELSEIF ENDSWITH([Variable], &apos;production&apos;)&#13;&#10;  THEN [Value]&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
      </column>
      <column-instance column='[Calculation_1620826081443251]' derivation='None' name='[none:Calculation_1620826081443251:nk]' pivot='key' type='nominal' />
      <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Variable:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;Abandoned&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Abandoned Land&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Animal Product Inventory&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;AP commodity consn&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Avg AP Prodn Shortfall&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;commodity crop yield&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;animal product demand&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;AP net export&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Crop&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Crop Land&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;fiber yield&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;direct commodity consn&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Set Aside&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Set Aside Land&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;commodity production&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Near Pristine  Land&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;NPL&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;VFN yield&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;AP production&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;commodity crop demand&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Latent&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Latent  Land&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Other yield&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;net commodity export&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;AP food consn&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Avg Commodity Prod&apos;n Shortfall&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Built UP&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Built Up Land&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Commodity Inventory&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;crop land forage yield&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_1620826081443251:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Commodity&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Animal&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Coverage'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column caption='Product' datatype='string' name='[Calculation_1620826081443251]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF STARTSWITH([Variable], &apos;Commodity &apos;) OR STARTSWITH([Variable], &apos;commodity &apos;) OR STARTSWITH([Variable], &apos;direct commodity &apos;) OR STARTSWITH([Variable], &apos;net commodity &apos;) OR STARTSWITH([Variable], &apos;AP commodity &apos;)&#13;&#10;  THEN &apos;Commodity&apos;&#13;&#10;ELSEIF STARTSWITH([Variable], &apos;Animal &apos;) OR STARTSWITH([Variable], &apos;AP &apos;) OR STARTSWITH([Variable], &apos;animal product &apos;)&#13;&#10;  THEN &apos;Animal&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Coverage [yr]' datatype='real' name='[Calculation_9900826155823147]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Calculation_6860826155650891]) / SUM([Calculation_9950826155736741])' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Calculation_1620826081443251]' derivation='None' name='[none:Calculation_1620826081443251:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_9900826155823147]' derivation='User' name='[usr:Calculation_9900826155823147:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Animal Product Inventory&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP production&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Commodity Inventory&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;commodity production&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='subtitle' class='0' field='[postgres.41507.320894097225].[usr:Calculation_9900826155823147:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[postgres.41507.320894097225].[usr:Calculation_9900826155823147:qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[postgres.41507.320894097225].[usr:Calculation_9900826155823147:qk]' field-type='quantitative' max='4.0000000000000000' min='0.00000000000000000' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[postgres.41507.320894097225].[none:Region:nk]' />
              <color column='[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='selection' />
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([postgres.41507.320894097225].[none:Region X (copy):ok] * [postgres.41507.320894097225].[usr:Calculation_9900826155823147:qk])</rows>
        <cols>([postgres.41507.320894097225].[none:Calculation_9690821100012568:ok] * [postgres.41507.320894097225].[none:Year:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Global Cellulosic Demand'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Value]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Value]' derivation='Sum' name='[sum:Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Crop Land Alloc to Cellulosic Energy Crop&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='Land [Ha]' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[postgres.41507.320894097225].[sum:Value:qk]</rows>
        <cols>[postgres.41507.320894097225].[none:Year:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Global Land'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Value]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Value]' derivation='Sum' name='[sum:Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Abandoned&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Built UP&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Crop&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Latent&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;NPL&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Set Aside&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='Land [Ha]' />
            <format attr='subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[postgres.41507.320894097225].[none:Variable:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[postgres.41507.320894097225].[sum:Value:qk]</rows>
        <cols>[postgres.41507.320894097225].[none:Year:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Global Production Shortfall'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Value]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Value]' derivation='Sum' name='[sum:Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Avg AP Prodn Shortfall&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Avg Commodity Prod&apos;n Shortfall&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='Shortfall [Gg/yr]' />
            <format attr='subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[postgres.41507.320894097225].[none:Variable:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[postgres.41507.320894097225].[sum:Value:qk]</rows>
        <cols>[postgres.41507.320894097225].[none:Year:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Key to Regions'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP production&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;commodity production&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='165' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[postgres.41507.320894097225].[none:Region:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[postgres.41507.320894097225].[none:Region X (copy):ok]</rows>
        <cols>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Population'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Value]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Value]' derivation='Sum' name='[sum:Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='empty-level' member='[none:Variable:nk]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='Production [Gg/yr]' />
            <format attr='subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[postgres.41507.320894097225].[none:Region:nk]' />
              <color column='[postgres.41507.320894097225].[none:Variable:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='selection' />
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([postgres.41507.320894097225].[none:Region X (copy):ok] * [postgres.41507.320894097225].[sum:Value:qk])</rows>
        <cols>([postgres.41507.320894097225].[none:Calculation_9690821100012568:ok] * [postgres.41507.320894097225].[none:Year:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Regional Cellulosic Demand'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Value]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Value]' derivation='Sum' name='[sum:Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Crop Land Alloc to Cellulosic Energy Crop&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='Land [Ha]' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[postgres.41507.320894097225].[none:Region:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>([postgres.41507.320894097225].[none:Region X (copy):ok] * [postgres.41507.320894097225].[sum:Value:qk])</rows>
        <cols>([postgres.41507.320894097225].[none:Calculation_9690821100012568:ok] * [postgres.41507.320894097225].[none:Year:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Regional Commodity Flows'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column caption='Flow [Gg/yr]' datatype='real' name='[Shortfall [Gg/yr]] (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ENDSWITH([Variable], &apos;consn&apos;) OR ENDSWITH([Variable], &apos;export&apos;)&#13;&#10;  THEN - [Value]&#13;&#10;ELSEIF ENDSWITH([Variable], &apos;production&apos;)&#13;&#10;  THEN [Value]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Shortfall [Gg/yr]] (copy)]' derivation='Sum' name='[sum:Shortfall [Gg/yr]] (copy):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP commodity consn&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP food consn&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP net export&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP production&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;commodity production&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;direct commodity consn&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;net commodity export&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[postgres.41507.320894097225].[none:Region:nk]' />
              <color column='[postgres.41507.320894097225].[none:Variable:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='selection' />
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([postgres.41507.320894097225].[none:Region X (copy):ok] * [postgres.41507.320894097225].[sum:Shortfall [Gg/yr]] (copy):qk])</rows>
        <cols>([postgres.41507.320894097225].[none:Calculation_9690821100012568:ok] * [postgres.41507.320894097225].[none:Year:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Regional Commodity Net Flow'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column caption='Product' datatype='string' name='[Calculation_1620826081443251]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF STARTSWITH([Variable], &apos;Commodity &apos;) OR STARTSWITH([Variable], &apos;commodity &apos;) OR STARTSWITH([Variable], &apos;direct commodity &apos;) OR STARTSWITH([Variable], &apos;net commodity &apos;) OR STARTSWITH([Variable], &apos;AP commodity &apos;)&#13;&#10;  THEN &apos;Commodity&apos;&#13;&#10;ELSEIF STARTSWITH([Variable], &apos;Animal &apos;) OR STARTSWITH([Variable], &apos;AP &apos;) OR STARTSWITH([Variable], &apos;animal product &apos;)&#13;&#10;  THEN &apos;Animal&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column caption='Flow [Gg/yr]' datatype='real' name='[Shortfall [Gg/yr]] (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ENDSWITH([Variable], &apos;consn&apos;) OR ENDSWITH([Variable], &apos;export&apos;)&#13;&#10;  THEN - [Value]&#13;&#10;ELSEIF ENDSWITH([Variable], &apos;production&apos;)&#13;&#10;  THEN [Value]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Calculation_1620826081443251]' derivation='None' name='[none:Calculation_1620826081443251:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Shortfall [Gg/yr]] (copy)]' derivation='Sum' name='[sum:Shortfall [Gg/yr]] (copy):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP commodity consn&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP food consn&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP net export&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP production&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;commodity production&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;direct commodity consn&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;net commodity export&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[postgres.41507.320894097225].[none:Region:nk]' />
              <color column='[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='selection' />
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([postgres.41507.320894097225].[none:Region X (copy):ok] * [postgres.41507.320894097225].[sum:Shortfall [Gg/yr]] (copy):qk])</rows>
        <cols>([postgres.41507.320894097225].[none:Calculation_9690821100012568:ok] * [postgres.41507.320894097225].[none:Year:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Regional Demand Shortfall'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column caption='Product' datatype='string' name='[Calculation_1620826081443251]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF STARTSWITH([Variable], &apos;Commodity &apos;) OR STARTSWITH([Variable], &apos;commodity &apos;) OR STARTSWITH([Variable], &apos;direct commodity &apos;) OR STARTSWITH([Variable], &apos;net commodity &apos;) OR STARTSWITH([Variable], &apos;AP commodity &apos;)&#13;&#10;  THEN &apos;Commodity&apos;&#13;&#10;ELSEIF STARTSWITH([Variable], &apos;Animal &apos;) OR STARTSWITH([Variable], &apos;AP &apos;) OR STARTSWITH([Variable], &apos;animal product &apos;)&#13;&#10;  THEN &apos;Animal&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Shortfall [Gg/yr]' datatype='real' name='[Calculation_7000826081938462]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ENDSWITH([Variable], &apos; demand&apos;)&#13;&#10;  THEN [Value]&#13;&#10;ELSEIF ENDSWITH([Variable], &apos; consn&apos;)&#13;&#10;  THEN - [Value]&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Calculation_1620826081443251]' derivation='None' name='[none:Calculation_1620826081443251:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_7000826081938462]' derivation='Sum' name='[sum:Calculation_7000826081938462:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;animal product demand&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP food consn&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;commodity crop demand&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;direct commodity consn&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[postgres.41507.320894097225].[none:Region:nk]' />
              <color column='[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='selection' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([postgres.41507.320894097225].[none:Region X (copy):ok] * [postgres.41507.320894097225].[sum:Calculation_7000826081938462:qk])</rows>
        <cols>([postgres.41507.320894097225].[none:Calculation_9690821100012568:ok] * [postgres.41507.320894097225].[none:Year:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Regional Inventories'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column caption='Product' datatype='string' name='[Calculation_1620826081443251]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF STARTSWITH([Variable], &apos;Commodity &apos;) OR STARTSWITH([Variable], &apos;commodity &apos;) OR STARTSWITH([Variable], &apos;direct commodity &apos;) OR STARTSWITH([Variable], &apos;net commodity &apos;) OR STARTSWITH([Variable], &apos;AP commodity &apos;)&#13;&#10;  THEN &apos;Commodity&apos;&#13;&#10;ELSEIF STARTSWITH([Variable], &apos;Animal &apos;) OR STARTSWITH([Variable], &apos;AP &apos;) OR STARTSWITH([Variable], &apos;animal product &apos;)&#13;&#10;  THEN &apos;Animal&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Value]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Calculation_1620826081443251]' derivation='None' name='[none:Calculation_1620826081443251:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Value]' derivation='Sum' name='[sum:Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Animal Product Inventory&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Commodity Inventory&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='true' />
            <format attr='width' field='[postgres.41507.320894097225].[sum:Value:qk]' value='148' />
            <format attr='title' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='Inventory [Gg]' />
            <encoding attr='space' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' field-type='quantitative' scale='log' scope='rows' type='space' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[postgres.41507.320894097225].[none:Region:nk]' />
              <color column='[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='selection' />
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([postgres.41507.320894097225].[none:Region X (copy):ok] * [postgres.41507.320894097225].[sum:Value:qk])</rows>
        <cols>([postgres.41507.320894097225].[none:Calculation_9690821100012568:ok] * [postgres.41507.320894097225].[none:Year:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Regional Land'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Value]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Value]' derivation='Sum' name='[sum:Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Abandoned Land&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Built Up Land&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Crop Land&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Latent  Land&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Near Pristine  Land&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Set Aside Land&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='Land [Ha]' />
            <format attr='subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[postgres.41507.320894097225].[none:Region:nk]' />
              <color column='[postgres.41507.320894097225].[none:Variable:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='selection' />
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([postgres.41507.320894097225].[none:Region X (copy):ok] * [postgres.41507.320894097225].[sum:Value:qk])</rows>
        <cols>([postgres.41507.320894097225].[none:Calculation_9690821100012568:ok] * [postgres.41507.320894097225].[none:Year:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Regional Production'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column caption='Product' datatype='string' name='[Calculation_1620826081443251]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF STARTSWITH([Variable], &apos;Commodity &apos;) OR STARTSWITH([Variable], &apos;commodity &apos;) OR STARTSWITH([Variable], &apos;direct commodity &apos;) OR STARTSWITH([Variable], &apos;net commodity &apos;) OR STARTSWITH([Variable], &apos;AP commodity &apos;)&#13;&#10;  THEN &apos;Commodity&apos;&#13;&#10;ELSEIF STARTSWITH([Variable], &apos;Animal &apos;) OR STARTSWITH([Variable], &apos;AP &apos;) OR STARTSWITH([Variable], &apos;animal product &apos;)&#13;&#10;  THEN &apos;Animal&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Value]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Calculation_1620826081443251]' derivation='None' name='[none:Calculation_1620826081443251:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Value]' derivation='Sum' name='[sum:Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;AP production&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;commodity production&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='Production [Gg/yr]' />
            <format attr='subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' field-type='quantitative' scale='log' scope='rows' type='space' />
            <format attr='width' field='[postgres.41507.320894097225].[sum:Value:qk]' value='151' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[postgres.41507.320894097225].[none:Region:nk]' />
              <color column='[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='selection' />
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='250' />
                <format attr='maxwidth' value='250' />
                <format attr='minheight' value='198' />
                <format attr='maxheight' value='198' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([postgres.41507.320894097225].[none:Region X (copy):ok] * [postgres.41507.320894097225].[sum:Value:qk])</rows>
        <cols>([postgres.41507.320894097225].[none:Calculation_9690821100012568:ok] * [postgres.41507.320894097225].[none:Year:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Regional Yields'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column aggregation='Sum' caption='Region X' datatype='integer' name='[Calculation_9690821100012568]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 1&#13;&#10;  WHEN &apos;USA&apos;         THEN 1&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 1&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 2&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 2&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 2&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 3&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 3&#13;&#10;  WHEN &apos;A Global&apos;    THEN 3&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 4&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 4&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 4&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 5&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 5&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 5&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 5&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Region Y' datatype='integer' name='[Region X (copy)]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Region]&#13;&#10;&#13;&#10;  WHEN &apos;CAN&apos;         THEN 4&#13;&#10;  WHEN &apos;USA&apos;         THEN 3&#13;&#10;  WHEN &apos;C C Amer&apos;    THEN 2&#13;&#10;  WHEN &apos;S o Amer&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;R Europe&apos;    THEN 4&#13;&#10;  WHEN &apos;Oth CEE CIS&apos; THEN 3&#13;&#10;  WHEN &apos;EU27&apos;        THEN 2&#13;&#10;  WHEN &apos;BRAZIL&apos;      THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;Russia&apos;      THEN 4&#13;&#10;  WHEN &apos;MEAS NAfr&apos;   THEN 3&#13;&#10;  WHEN &apos;S S AFR&apos;     THEN 2&#13;&#10;  WHEN &apos;A Global&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;E Asia&apos;      THEN 4&#13;&#10;  WHEN &apos;CHIHKG&apos;      THEN 3&#13;&#10;  WHEN &apos;INDIA&apos;       THEN 2&#13;&#10;  WHEN &apos;R S Asia&apos;    THEN 1&#13;&#10;&#13;&#10;  WHEN &apos;JAPAN&apos;       THEN 4&#13;&#10;  WHEN &apos;R SE Asia&apos;   THEN 3&#13;&#10;  WHEN &apos;Mala Indo&apos;   THEN 2&#13;&#10;  WHEN &apos;Oceania&apos;     THEN 1&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Value]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Calculation_9690821100012568]' derivation='None' name='[none:Calculation_9690821100012568:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Region X (copy)]' derivation='None' name='[none:Region X (copy):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Value]' derivation='Sum' name='[sum:Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;commodity crop yield&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;crop land forage yield&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;fiber yield&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Other yield&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;VFN yield&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='true' />
            <format attr='width' field='[postgres.41507.320894097225].[sum:Value:qk]' value='124' />
            <format attr='title' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' scope='rows' value='Yield [Gg/Ha]' />
            <encoding attr='space' class='0' field='[postgres.41507.320894097225].[sum:Value:qk]' field-type='quantitative' scale='log' scope='rows' type='space' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[postgres.41507.320894097225].[none:Region X (copy):ok]' value='false' />
            <format attr='display' field='[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='15' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[postgres.41507.320894097225].[none:Variable:nk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>([postgres.41507.320894097225].[none:Region X (copy):ok] * [postgres.41507.320894097225].[sum:Value:qk])</rows>
        <cols>([postgres.41507.320894097225].[none:Calculation_9690821100012568:ok] * [postgres.41507.320894097225].[none:Year:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Zero Yield'>
      <layout-options export-no-caption='true' export-scale-mode-auto='false'>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='gluc.sensitivity.eb-sens' name='postgres.41507.320894097225' />
          </datasources>
          <datasource-dependencies datasource='postgres.41507.320894097225'>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Run]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Value]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Variable]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='real' name='[Year]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Value]' derivation='Attribute' name='[attr:Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Run]' derivation='None' name='[none:Run:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Value]' derivation='None' name='[none:Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Variable]' derivation='None' name='[none:Variable:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='quantitative' column='[postgres.41507.320894097225].[none:Value:qk]' included-values='in-range'>
            <max>0.00000000000000000</max>
          </filter>
          <filter class='categorical' column='[postgres.41507.320894097225].[none:Variable:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;commodity crop yield&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;crop land forage yield&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;fiber yield&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;Other yield&quot;' />
              <groupfilter function='member' level='[none:Variable:nk]' member='&quot;VFN yield&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[postgres.41507.320894097225].[none:Variable:nk]</column>
            <column>[postgres.41507.320894097225].[none:Value:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Verdana' />
            <format attr='font-size' value='10' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Text' />
            <encodings>
              <text column='[postgres.41507.320894097225].[attr:Value:qk]' />
              <lod column='[postgres.41507.320894097225].[none:Run:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[postgres.41507.320894097225].[none:Year:ok]</rows>
        <cols>([postgres.41507.320894097225].[none:Variable:nk] / [postgres.41507.320894097225].[none:Region:nk])</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Global Land'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[postgres.41507.320894097225].[none:Variable:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Variable:nk]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Global Production Shortfall'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[postgres.41507.320894097225].[none:Variable:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Variable:nk]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Global Cellulosic Demand'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Key to Regions'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Regional Land'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[postgres.41507.320894097225].[none:Variable:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Variable:nk]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Regional Production'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]</field>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Regional Inventories'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]</field>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Coverage'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]</field>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Variable:nk]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Regional Commodity Net Flow'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]</field>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Variable:nk]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Regional Commodity Flows'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[postgres.41507.320894097225].[none:Variable:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Variable:nk]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Regional Demand Shortfall'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_1620826081443251:nk]</field>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Regional Cellulosic Demand'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Regional Yields'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[postgres.41507.320894097225].[none:Variable:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Variable:nk]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Zero Yield'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Value:qk]</field>
          <field>[postgres.41507.320894097225].[none:Variable:nk]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Population'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[postgres.41507.320894097225].[none:Variable:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[postgres.41507.320894097225].[none:Calculation_9690821100012568:ok]</field>
          <field>[postgres.41507.320894097225].[none:Region X (copy):ok]</field>
          <field>[postgres.41507.320894097225].[none:Region:nk]</field>
          <field>[postgres.41507.320894097225].[none:Run:ok]</field>
          <field>[postgres.41507.320894097225].[none:Variable:nk]</field>
          <field>[postgres.41507.320894097225].[none:Year:qk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Global Land' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Global Production Shortfall' width='192'>
      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
      fWkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Global Cellulosic Demand' width='192'>
      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
      /wfJLMK9IcvyQgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='104' name='Key to Regions' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAABoCAYAAACnk/+EAAAAAXNSR0IArs4c6QAAAARnQU1B
      AACxjwv8YQUAAAAJcEhZcwAADsEAAA7BAbiRa+0AAAyVSURBVHhe7V3brqsgEG2CaZo2afrW
      L/D/z9/10TOoyAIBES+71WWyX3YRYZg1N5jhcuFDCpACpAApQAqQAqQAKUAKkAKnpkDDhxQ4
      EQVGYD/R3DlVUqAhAMgEp6YAAXDq5efkJwHw79+/hn+kwVF5YBIAlBGkwJEpQAAceXU5t0kK
      EACTJGKDI1OAADjy6nJukxRYBID3Vek4auRPNap6NfXkELZucG0UjFFdt/4e+/8bCqR4seNR
      dX2PhlYIgLqpVIzx3f+rv6GG/eoIpNVfj4jf34QC0wBoQeAtfxkAKmRy1VwfFln1697cKpH+
      vdT9awBUAQ1FCGzCgX/cqQWAy3N183KEoPtrEQAsU307K1WDeaaeYAp9+7D/mJV+8/MxAPSz
      GSyWbwbA27XXjX+hqkfZmgyaSjVP6eE6ECGMgMFXqELjEE2nHZr6HjD/VFONzUvduLmrkGqW
      vvz2MLb67r1DxyVj/dMAeBr6erQs0gA12P8hxyJjtOMmjwkbTs0HwaCpVO+KgyoMQQCd5bhz
      H3f6NcjsM+0nVRghSPpUVFnTPBUDwLs1yc16OjSXTosA0NTWtHAYRaSdEukJLsH0uNsWtRup
      MdGj921BBAfMn4HRQLIHnBMHAOIt3VopraW4z/QiwV+tOmhe4A8pQECNfpJInba5PO9HZeeE
      0sj5hmiU6zdE0DKX7yuaZTjB6tb4ircMAC1fhM0VBES25VIDekdhyicwzC2f1GDzoaC9Rf6v
      O7YmkP8ZGIMvQhC8g6AGQI/aa9qZ+QqQzKfQBMqfJVsOFMgAQBsQEeECDFEOgOHDIgXvN7GL
      beQHQWCsj+RKgbQMKXtrcuXGlIAB/QHcAGzeJkUcAACOwBCsqWVmGdGQgYjU0N2Ef0JOn6JA
      wgeoX80VzKDLxXLZCgAYD8xx4tAuiM0h4qFbcBsTJBMAoFGStrwHjvUAkCuNJC4d0ABTS83f
      QxSYiALpVwKCdhMAdN8yTJvhwK2sAdBJTzuzXXTI8mA/5sCQB3DM1ABiduY91AB5dIq2ygAA
      mtp9P0UA0MygwnG/vls0QdzYSHD8q/oA6DNEqPUEYsHw1tMAOP/MsxcEwOYAQFParEoxAIYY
      vURL7ibEIT724wpRDg2UDP5fNQqEzB0lKYLEDnA9AGg/190tr4bQmNDoZmgkDhlNoIWMPxDQ
      bnp6Pb4f2keF9YDo22IApEwMFYqAxKa70j7AsOEBjk7ok7adNYPWBIAGdc55KQJgJf4Xbypv
      70Y1uKNUBIAu/h2O+nSDCOx05sxz8U4whisnPoiaorfT1wWA/n5Hp/DCiPTvNhq6hyZQDock
      2mQAQCT/evsAC4fL10mBb6BAoQb4hqFzDKTAcgoQAMtpyB5+mAIEwA8vHoe+nAIEwHIasocf
      psAkAD6fT8M/0uCoPEAAEOCnFnAEAAFAACAKfHPuqKqP86JZp3mAGoAagBpgiQao7+7hNzdF
      spJUwPmSZos+Px837fIiuQDUAvPX5ntplnEUoj2mUw3r3h99cZVAvgmUd9hLA0Ldcgm9RZ/9
      t0dJMqqpKf0PJAR2BsDDO+6rro/m3TPU+3F1T0JWeQDYok8jsUJJMuqZN67vlXocv10byPHI
      FGzlGgBOUmqVEpWkUkOnS57JWKgt+hwI4Sa12+yu54EkYAaNMxnjNwG/IwCwssJ1JaJu0eew
      kACuSsaLmUHPwPhtknuoCNalqR6a2d5QaMsmW6h7yLdIFcjyGBeKeX1Gx8MVARvlt90A4KY7
      riMttujTMhYmybTjxRTMgBkUqieal2zRAUGDzNJl2q+pMFDg1F0d1yNah95H1Ba7AQBKfuSY
      NlkaYos+zSKj+WP+h4C7jaSqCwBJXJGUT81443Lw8pukOra/QbmVC9BlXCCrG4NfIGtgbA8A
      uiyk8a3I/Cng7uYEb8GsW/TZE2tgTMlSQzBCKRbfjMOSij7T2d86xsc/+1sAaJIeOmJgLJBl
      +gITiIw/R1MRAEH7eCiIK+lwLgNiNbopRra/WyYfa46RqfWZUSArAABK/DIAqCyr42MqAc7d
      B9jCXt+iT0286fKNnW1vN0c0040leQAA3jsts0Jeb8e8uVJJImUEwEIHf74P0K/zXAB8mi0i
      Nlv0+Uk6lK6DiY7regCAAr25m4EYBcqUZNQUrrDJ1QC9dTAfAJ8tYvYb9JkyVzqmCfse6wHA
      LZCVxagEQKEmmK8Beo1dAABtJnglwzFaUboTvG6fedIXSzgaBl0PALjn0Fcm7qNGeh/BKZBF
      E6iQ8Y15WgCATgCWAUAvYG68PP8s0Ip94u0wKVMC65L27dYEgD6El1UgiwBYDQDpPRvX31sA
      gD6enbgqVelCRAV2bOr61dw+LRNPHXcAM0h1c1oXALrP6QJZ430A7vpmmYwDf+UGHFYGwLxB
      zglrsS1puz0PLNYAXKTtF4k03o7GBECBiUaG3I4h96YtAUAALHQ+fxsMBAABQACkcoJ/uOgX
      h04KTFJgUgNM9sAGpMAPU4AA+OHF49CXU4AAWE5D9vDDFCAAfnjxOPTlFCgDAByEi94CnLz7
      N5xQPpzhkFvndRpi7BmSXPRZfrjxbzk52MMRKBA/SiN8JUUL8NkfAHWiktxwuXZ3cjL8jJNc
      Mq7iPsK6cg6TFHiYLK/0jZHK3hO5OwCcE6QivYfrc/WNind9n6s51BQBQCjJhQiYZI0zNHBP
      3Wpp/xKu0o8cPfdv6+yv8N0ZAJiAUrYkeMrTmkJEQBk1D/QWJlSBhHdniBpCiiTIjz8GAEhy
      0Re8w1FsQuBAzFwwFUyp1awRfbBGrDDNzgDACs0Fl2lDkkun2sAfIAIK2OYor2DqaTx4YmZr
      S2Pe9gaA3J0eSVRXOvKjC+wm1gTr9Zhm1gyKOc1HWWTOI06BeaY1aoudNUA3hTqRRWbKlFg/
      fcDt4NlLaX/7QEU25//klxNRYB4AJFTU81IbcEnnBAepuHgfoO+1fjX3m4RFh8gPliqR+v3w
      cSxo6yq5mw19EQEnYnqc6jwALNcAyU2ufmA5bUbLpasoQ6XlwZvxbndx9gvioDkpN5xw2nv7
      ADnRF1Azt1lLEkDz6HYXv2pyCDSzPsrGP06BfaNADWTgB80OjLdieEa/J85uytN1Spd3q2Jr
      bsYcXagArZJBsB9fZg4/SoFd9wFkFO6ObjXs6Dplv7Wp4oQnsXSFkptj7nKJXj+l96O5Ort1
      qulYGZk7zgAIEkLgnEDZbydY0zfnTI+S65Octcit3SJawryIt7uk1hXaUQmcEwBN88gr1rb4
      LJChr9wBFqt6pkslBh+J/NjzPgFbXhfTghex5Hh6WVFTzPM6zsouR5339qdBj0o5zut0FCjb
      BzgdmTjho1KAADjqynJeWRQgALLIxEZHpQABcNSV5byyKDAJgL1rNfJ7v11q8NfWjwBgaUSW
      RkyVRvw1RHO81CBzeIAagBqAGoAagFJzjtQ8UtvFGqC+J+r8yFmgVx1jLu+Mv5wqjRLWu5ES
      7/Tl3VoEb9al5JH76hYAIO/2Q53iGLwlcnTGXzLAYuaIB4CLnHYbgYX3657alPl8cg5aqubh
      8VgxAB4OU8rRZp3Q3neec0+wTXHEZJaINPMBIKCqfM1CABAAfaYg3hRfv67ugc3K5bEyACy+
      1R1Obsq5Z1umInKl6QAAMLfkSKujBQgAAiAAgI5HkMeuDp2KAIDpZ9eSKAqe8Zf3MeH9GeoP
      APB5wI3gqAUIAAIgCgC4+1kytFBwFgAgQ2JPgALP+LeDcdIgA2YQAkDfvG6S4sWxoRNMJ9h3
      gtEE6n6DFN3+MnTDNwUAwKT1EuKj+WPeR1DdxpLMAYC8E9IC1ADUACMNoAsuu1FK33fcHwBD
      ISspjYiaAqpIjMwqHwDy3kgLEAAEQLRcThdoUddxqH13AAylDNF8aYEAtv3V0ywBAHycHGBp
      TwAQAAkAjKKGvfAtAMASH2B8uUVXCtH/cx2VTwgAqAW0Y0MAEAC+CQSm8kV4JLTPVACAT1Mc
      BYoUxg2BwNntjQDA0QIEAAEQ2gdAnvND5yJEiwCAjBdDVhfdubcxftVvPli7PeDotiop4mDH
      ACDvOPeFtQRQJ2eEksDEEd4BE9qLQjqbtrLvtDAM2hHLL4eiy6Ckd4LhcotbnOC24BaYQQkA
      YAi10yQEwJEOq+XPJQ4AvRGGhdzUw/JfmQZoEfbOK0JkzgKBiRLc7DKoxaK65n8pAIy0AAGQ
      zzRHkPxmDikAeHsBcJRmAQC6D8eLEInpAyfw8G6v9AKBGWQ2LSYA4GoBAoAAiABbqhlaf7M7
      GLcYAOck9pEk57nn8h+ad/XCsoy7hgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Regional Land' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Regional Production' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Regional Inventories' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Coverage' width='192'>
      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
      l0X9doMhAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Regional Commodity Net Flow' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Regional Commodity Flows' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Regional Demand Shortfall' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Regional Cellulosic Demand' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Regional Yields' width='192'>
      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
      86eKAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Zero Yield' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAAAXNSR0IArs4c6QAAAARnQU1B
      AACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFgtSURBVHhe7b31d1Tp1i18f/j+izvG
      d3++r57XzzndNA00HkiAxmnc3QmuASLE3d3d3d3d3T2VVKrimXfugvTBkpbK0wmc7DGqOyS1
      93ps7UfWnHP9r/+1cq20wN97CwD4/2ZnZ/83P/9n5bPSBn8vY4Dj/v9X+b40+GdmZlL4aVz5
      rLTB39EYqJlzgP8jVZoesXKttMDfTQtwzE+sOMDfTXevVPTjFlhxgD9oTMzOzmB29q2x93/+
      2LxyeAgy+dgHvx6XD2NgWIG3t89gqK8XY5Mzv1jy8VE55Irxj743i+npaUxNTWNmrkDzPGlm
      chy9fUO0+PVeKw7wh/TtLCryklHS0I3Z6XFkJcagtW8ESsUolGPjqoE4OTEOpVKBquwkZJe1
      YIL/Hh0dxSQHam16DJzDMiBXjnHwyhFoa46qNjmm+B2FQonpmXee9X5dZqeQlxSB4obeD2o4
      JuuEvZU+bOzsEJqQhfEpOsTUJJ+jwNQ0nXRmRlUOhVKJ0d5WBISkQMnfjY8pMTY+oXJeqWxK
      fn9icvoPaT2RRlYcQGTrvvfsltJkOPrFYbCzFraOnmjvbENYgAfMLGxR3tAKHzdTuPkEItTX
      E0l5tajMT4OjtSU8Q9NQHB+AW0/1YWdrh8zycniZ6KOgrB7B3q6wtbVFWlH9z7PLnMmJkS4E
      +AahXzH5QQ3l3bV4bvAa2ZlJMLW0Rc/AEOJDffhsG4Qn56OmMBX29nYw1NNFXm4RXD2j0Vhf
      DGdHezg4eaCqthb2NuZwdLSBa0Acxqb+oAYUZGbFAQQ17MePnZD3wMnGBmEhfghKLMAQ366x
      4cF4ePsafOKzYW7xCtUdQ8gN80BAfCHK6ACedia4edcIGVFBsPRPRl1BAiw8/OFGB4gIDcLl
      m7dhbvwaxh4RmPpoFmguTUN4SiGmP5ocJAe4o30Jr188gWNgCnpbSnH9+hVYmhvhmYkVnCz1
      kVfbAn/OEglxqdA1dENogA0iMsqQFeUGT78Q6BmZo7apEhamZuiRf9mzwIoD/EEOwLUPssKc
      cePeSw70QZQnB8HAyBZvXj6Bf2IObB1M0NwvR0GUD/zCk2Bp9BIuTnZ48swCWTEh0DFzQaCX
      EwIS0uBjYYy0jCy8MTCAr78/kvKrPljPz04r+VYPVDnUx5e8pw5GDg7obGuAi70DcosLYW6k
      B08fP0QmZSDUwwrugaEweKyN+Ph0GJp6Iys1BPbufvBwsEZ8SjpMrZ3Q2tXImcAKPSNf9hSw
      4gB/lAPQjkLWg8qaBkzwtTw2MoDSokKUlleie3AY7R0t3NhOY6S/G70DMrQ1VqOouAS19a2Q
      8XeFBfkoLquGfGwM3W0tqs1tZ3Md8vML0dE3/G6D/LYyiv5WhEclYPQzG+XpCQVaOjo4Y8yg
      v6sNXdzk9ne1oCAvH43tvRjoakZcRBB0X+ihrKETza3dGB8fRU1FCcprGrk/UKK1rQNjE0q0
      t7ep6vIlXysO8CX33jxln5oYw/DI3KnRb6ngLPrbahDk54f4zGKu77/m85+37bJsHYCRafT3
      90sF/C09uPLdP6gFpqamMDg4+AdZE2dmWTtAS0uL6sx65Vp+LTAxMYG2trblV7DfWKIVB/iN
      DbbQ13sba1Ba18q1ey76ZCOQDcs/OZ5cRHOqR9VXF6K5R/beY2fR2ViO2pYe1e+muX7PK8rH
      6MTivkh+qwPM8hCgvjQLEdFxSM4uRHtbHYpqm35Xc3TVVTEO0vfBvV0tVaho7ny7rOE+p7Cw
      CMPjv7xB/7tzgKlxBQdNBeqaO7ihG1X9XN/SyY0eN4eNtajgOXtjUxMqyyvQz+irXNaL2mo2
      bmU1mhrqeA7exODRNEb5e+m7Xf3DDCSNo6W+mgEqCziEpiM+KRJ5GVF49cYcFdw4dvYMMPI6
      ge7Obky+2zROT46hqbYKNfUt6O/tQn1dLZrbuQHubEV5RRWGGA0e7utGTW21yqa0QZauqXE5
      unv63z6vqws5mbGo4GAfGexBeVm5akOdHe2KoKRCjAx0oZDn/Y8N9NE1/HFE+HeNvZ9v+q0O
      oBhqhd696zzhikdIdBLyM8KgZ+fCdq3BsGICypFBtnkZ2roHoRgZQgPbur6xHZM83p3igO7q
      6WOdJ9Hd3YWq3ExkV7dBPsQ+YJ072Qc5iT7wiMvi73pQkpOC56+N0TKk/MVK/n05AN9CBQlB
      cPYMQGpmJpIj/eHs4QsHns+nZKXh1bOn8Pd0hvZjPfh42ME1MBE5sR7QM7WDncFzGNq5w8bU
      CDnldQhytoZfYACs7D2Rn5UAK1tXOBsZwDYoCfZOpoiL9sWtB8+RlZUBe0d3VJXnwd4tGIpJ
      npowmlqVGQM7Vx8kp6YjyssORjY+PInJgLWVDQL9POHmH4MEH0cYOPnClY6VVNyoOukZG2yB
      o4MrqioK4eDiB19vK8TlFMDD2hQOjnYwtvVBXJgT/KOS4MVjS/8AP2i/er3kDiDvq8WTK1cQ
      nZgKE2sXZPAY+IGuIYK8HOEdloQQdyseBTvijbEt0hNC8cLYGoXlPDGjA0wMd8LJ3gmVVcVw
      cPZCQoAPYyeZ8LIzZdvaw9jSHbGRbLOIWPg7SnX2x4Pn+isO8In7z4wjzNEKqSVtGFcMIdTJ
      GkmFDUjkQPMOCoWZlT1a2ch6Jl5oqM2AhZM3MmM84Bebi8wAN/imlSE+wBbh7ERrfXM0dbbD
      ztAcPi4OCIgrRl6YNxyCeYZvo49MOoWZgxeU40oOcFvo6OggKqfm7XHlzBQSeaYfll2Lcc5C
      aQEuCE6uRG9jLkwdvNHRVAwLKwdEuDrDL6MKuVHe8GJwTHUcMDOJeF97vHz5GqFp5Qj1MUNo
      fCweXroCUzqPlZ03okJYn4AQGJk5oLW9EfpmRkvuABOKTtjpGaKBs6uhuR3SU0MZ3ItEa1ky
      jGzt8freReibWsHcyg6JUcGw5cvn50UbYR2pwc7QefEKgQkFyA7xglNIOJ5evcjBb82Xjxsi
      GUB0DgiAqb4tmjqaYWxiseIAn85/s6gvSoWtjS2CeE5ekpcGB4b97Z09UVFdCl8Omp7mWrh5
      x6KjtRR+YbEozYpCQk4lSpOiEF/cQHxNEDJL65AR7Qc73usZHI+GqnzYWtvA3swcgYl58A90
      49KmBvbWZkjOr0VTSTyua79Ah2xuGTKL9uo82PEe/5BozkQhSClswsRoP9+ILrCzs0d0ahHi
      Paz59jaGnYMzahg8m7s6K9Nw9dYTtAwokRbng6zyWiSFcSZzckF4XCby0sOQmFWIKB8XODo7
      Q8/GAf2jE7+4HPgtX/itS6DJsT4EuXoQAtIJD0I0igsS8fqNPhxZ14ziWrZrGBwcnBAYHsd+
      SecSLv8DEF5fXQ6u3XyIhp5RVKTEIDqnHCmRfpxtXRAWm4ZczqiRGbmI93eDE3/3xtIRXSO/
      vOz7+1oCsYdnZ7h+HxlmIGmMR6z8WT6CUSUBafx5nGCvGZ46SaCvGb6lx3nSMTU5oQKk/e3/
      41zHz3DdP4Hh4WGMT06pAGIKPkcuH1X9e3ycoDUJVKaQE1Q2jtq8OPjHZH8AV/j5nlElgXBv
      bUjXJGeM4eERrnenkBnoBd/kYoywrO8DN5uKk+EVka56ngSik0Bs0yznsEwGBcF1c2WdVMUD
      RlgG1nWR41W/1QGkZd+EBPyTgHVsX2kPMzIiwwjbTALzzUxPYmRYpuoXaa0/wXZ8/2qvyIB7
      SKJqTyDVdYLt9bYPZKr+k+o8wTaTYiAjbL+3df7lSv/dOcBvecstzndnuUHthWz0Q4jzr3n2
      yEAfBj+CRkv3yYf6+ftf3uD9Ghu/9zu/2QF+r6F3943KBlSQ8MW+VhxgsVv07+R5f7QDiGrW
      FQdY5JaVllLSVKzWxal7YnJy0ZctapXpo5tXHGAxW/Mzz5KgEL81EjzDNWFDZRFiY2KQkVfC
      4M8U4b5VSM8rVoG2+tqqkJKeBwXX6LWVJRhWLjxQZ7kuLcmOQ2h4OGKS0tE/8rdljGKgHYlp
      2Rj5CBDf21rBzVj+ggEwpawbScmJGOTGtLe5Eik5Zaq17dw1rRxCQEAwuuWfbuJmJpXI5SYw
      NjUHSulI9VdciqEOxIaFISomHrWtvT8D58ZGepAQHoaIiEhkF1awjX7Fw959ZX4HmCXnoQHR
      UVFoI7p1amyEaNJEtA+Q3DM2hNSoCETGJqKpa1C1d6ovyUZBdTOdfQaNZdnIKanDmELGI89q
      vkg+Xz9ZTyNPukIRHZeIlm7Zz/WREwQYzd9HREaioKKBe4tfrs9XNQO0EANvyXP50soqlJaU
      Y5Cb1HA3M2g/0UNd9zCKE91x884T5JRWwsVCn78bXbCFphl0sjF9hKj0Ap7qNNFx3jkM4wn5
      PH25c+cRMiraMDrYiahgfwRHxqGaDhhJJ+tuKichxRMRZF0pP0Jldtdl48zF0wiNS4efjS4u
      v7BBb287IkMC4BschQ4Gw8wtrFFNKEhsuD98AsPRNfR2/Ss5ZZyrJayCUj9wmoUq0lmVBP3X
      NkiOIa/ALhDKdwO9rzEL+i/NUFxeRYRoN6o4AGvbe1BbmMfgYAfSoiMRERWNpp7hTx6/0Ayg
      lPfB1UIHySUtaKvIxKO7t+Edl4ehnkoYPtNDUlwkjO0DMSTrgt2bF3hu7IQhblpDHHTw9LUF
      yioKeJRsz9993iPrc4JhaOyO+CB3OPoksB3eFq+lJBoGBk4oZ/+3d/WhpDAdrb0DKMvORkt7
      B509HFGxcegc/Nv+6atygKxobwRnVP78RhjuqoGNrTNZVjxeSypCYRKZT648WfH2gomBzq9y
      ANOXF/HK2BKuvsFsuLeDcFLBDraxRlREIBy8olBXnIRXem8QwkBMHo/jTL1D0N/ZhPgIf9y6
      fx/1vR86Wnd9Ll6YmcLOWBdOru54ZemKPm6Us1Li8PLuXYSl5aocoJadlpueAJ0ntxkzqH43
      CGeRy3Nw75TyDyDQCztAIm6cu4EXDPQFJhb/TJKRHOD2+WuwtnckFyALwT5WiMmvQLSrHdGg
      BTB/8Rp5NW0/R6Hft7HwEmiKsQ9zJBfWItaP8Y7oKJhYOKOpqQSv7z5BgJ8X7H1jyT5LgqNX
      EDzszJFRRQi3uwl8A4Ph6eECIzLl5nOA2uxAXLtwB8+fPENcft3Px6XNRZG4fkEb9gyoxWcW
      wsPFENlV9fC1sEBmfgEMnhqoouYT76FcvyoHqM+Ph7mTP5pa29Hc2IjUSA/cfaQDM4MXeKBn
      j5RoD3hHpSM/wQdnLlxC7a+ZAcweI55LFOmZSi6ppKu9PA337z6Ehbkhbt/TQREhEdGhAXit
      8xJh4YEwdfdGIANu1o4kwPDtV9058sH4lBxA38kTPcTlt9YUQZ+R0bRYHxib2eLVnbvwS8ik
      A1jxmb4wMLODztNb8GcQTjUD8Hg22Yv0xIhsjA73oqysDsrRQZSVVhCi8Xk3kGYAS0tf5KVF
      w8EzGIOEHkiX5ABvXluhslaCa/TzjWoPb8IUPEzfII4OYGcgBZPI/+WbuoxLCuVIH+1VqZZK
      8zmAhPmR9XfA08YISRnZePXoHge/BbTJXotMimfA6ymS2Z4DQ4MIdjbGs9eG0HvG77hFIIi0
      0NSiGoQ46+PKY4P5Z4DcENi5RCIjNghuQXE/45xaiqNgaORGDkUjuvnmD6JDhaVkwOa1HjLI
      m7AwsEOvcoYQk1byMqSZuwMllQ3LUxbl9+wBJMxIYUYi/P38EZecify8LLRL69CJURRmZaGy
      oghldXyjsUPDwyPQL184OCTtKTLi/ODm4QX/sBh0y6Spk0GshgouT3qJVJ1EVXEOSS2liAgK
      YBAqDS0MpGWXVaCmIAMBQSHEvUSj76O1vJz7h4yiMp6Jz2J8pJf7lWJGfysQFBCIsOAIVDS2
      ISc3j1zcKgQFBiI4LASVrW/BbRLQKynMB74RiejtaUVGRhHxSt3ISMt6C7P4zDXS14T8gmrG
      DJRshzSC594uaRSDbQhwdYWXtw8SOeA7mqppL4C0zQjUt3aigIElGfc4ct6fkVUK+UAH7eWp
      eMDzOcD0lAK5iVGIYFu0tzagsKKecYppdBGgV0CCT15Wger+afZJcWE+huiMY2yD3Ox8Llmy
      uWShAkZrJSLi0+ZVvhhoJ1morJm4KO4v0lLR/Q7zM9RVC29nV3j7+CC9sBLNNcUIZPuFMdjY
      2tGJ3IwCFUlooKMa2QW1kHU3IC2r+OtxgIWWASt/W9wW+GpPgaSK9fb2Lvmnp4foRi4turuJ
      kFwG5Vkpw4djopOQhoqKii++bzjOPpwBpBD8CMPnS/2RYAY1NTWQMby/1GVZsf/peBgYGEBd
      Xd0X3zccXwsvgaSz2ul3B6pvRZH+hluZmZ5S/XtOmEn13UWiMP6ePcCvmeRnWebx8XHVR7Ih
      6prli0TCBEm4F5F2Zv4wO5Oq+kj9LdVH1BJohgHA9+2I6p85O2NjY/M7wMykglowwURFZmGS
      g7uumGJNREC6+YZRUGkAyTzms6fCWCT1Z5RjcqQTkx0Un/uJFs3vqYQYB5hBDmHNF/fvx8XD
      x5BU2fR7ivYr7plBirstLkl2jp1EVkP7r7jnd3yFJy6xxMRfOnAAl06eQ8G7jfLveNKCt8wS
      gh1mpofLtHP57CWUM4glwgFmqJrnp/8cVw4exJVLN1Db/+Hp2WLVa5rBRI8XD3D14AFcuHhj
      AQeYnqBOjR/0bEMZzFHCy5HnqpUthLVaICQuDhYmjgww1MFCzwStPG3JjnQkhj6KKEX1iyrE
      AZSDeH1sJ14+ZDkvaeLu60L1C/q5J1AE68G+7TDRcYXeKQ3omFcJsTMra8N1ra0MJnngyWEN
      GDmKEfee7m/A2c2b4GHuidt7NWDn0yHEASa7KnFk3SYE2Hriwo7t8Ar/kPa4WI041lKI/as3
      I8LRA0c2bF14CdRVmgETpwiM8fy5MCUM1sRvP3t8H1HZRQjxcGDQwQoP771Cu2xSFYlzcI1Z
      vg5ACt2rH7bB2rIQ3pYHoX1PkAMwqnt/lQbcXEpgr7cHL14JcoCOBlz7n21kkJXB5PFuGJoI
      cgCqwJ39j22IiSiDzq1dZG4JcgDym4/+aQdSE0px98IuinUJcoCSDBz41z0MMhbh/GHNhZZA
      SqQHuuLWY1PUk6s51NPC4AyXPS5eDM3L0VCRD19G7fyITVeQ2ZQUYIlHz8x+PmdWx2OFzACz
      I3AzOIAD68/j6KrvYRH1Nri06NfMIKyf7MKRTRdxaNUaOCfXLboJ6YGz0z0wvLUNJ7dexr7v
      foBPdosQOzOT7dC5sAlnt13B7u83Iqy4W8gMMD3eiPvH1+Pi9ivYsW4rEqoHhNRnQlGFGwfW
      4qrmJWz+foEZYIZk76aaShQWlZJsTXLHcD+qCVKSyOLShreX1LPquiZVhHR6agyNNeUqNbPe
      oYUxNr+mVkIcgIYV3Yz+MSxeVFRC8oUoTP0sRonnKaad4uJSFUlFzEWuQVszivIKUFpaRvrl
      4rK+/lbmWchaGNSinTIG+ca5URWxB5BIM4ONdSo7kjCA2qja+Rqde6d+MvYKaKeismolECZm
      cH7dTxXiAEvQZJ9ggaQ37yQ9fKk/UgM3Es/DY6olL8tSt8VytC/lLmhubv7i+4bH4R/OABJn
      Uxp0S/2RRFjr6+tVSSKWuiwr9j8dD1JwcO4F9SW3DxODLOQASsjIS+3o7OU5P8nG5KJWUbyo
      gUJSUgaRPq5zyyhMJCkMj8plqK+poBBUPVP8KNQetKIcYKidym15eSrlsIGhIbXLOV/nD7Y0
      cy2bx71GMXHvw8Ls9DdJa/M81V5DRjK4qMHYR6GqAtop4V5jWC5XRYAX3QE4pnrqpLV5nmqv
      IRf18qOdrpoqgiWl+lTM7wCjlPP2tTDAa8sgkrrlhMs685jTA+ZmFsgvLYWzlQU8PFxh5eiH
      8qJsuLi7w44aNDFZ1SqHUaczhDiAchguenewd81GHPr2W5hHEJmoZjk/e79SBqvHl3Dwh03Y
      /+13cEwoF2JHqRjEm1uneJa9Bbu/WwuvDLKpBNRHIri8uPATTmzaip3fb0BwfosQBxgd7uIp
      0B6c2awBLZ4CxZZ1CqnPyGArbhzUwoWtW7FpzUenQB8sgegptZTe07che4dydR52BohMy4cr
      s4d4hoTBWJ+OUJLDZAovUN7YQ2BUB4KcLBGTuUwdoLsdz9dvg6lxKlwM9+KWdraQBh6jGNWd
      VVupeZMBq+c78eQ5pcZFDEzCly/9eSu8PbKhf3cHdN9UCbGjIKz45H9oMFNMNtXddsDCulGI
      A4yUZuOnP21nfoIs3Dy1gy9UQtcFtNtQfjL2/usuaiql48x+jYX3AA05CdCzDiBuW4FGnvt7
      uDrgwf17SC6uQQ41MO2tjfDgiQkaWtsQHUjCSXAchWHlahdcyAxAHP6LAz/gxUN/mF3Rwq1n
      ghygrxHaO9fA6CUTTZzRwFNDQQ7QRQfY8j1sDEPx6OhW6FkJcoA2OsAPq0lzDMPNfVth6SrI
      ARqzcWj19/CzDcP5nRrMQSbIAaqTseebdVQGDMFPGzctvAQKtDfF9Ts6VB9rRFtdMdydHBAU
      ncL1swz5qdHUZnQh+aAG1bmx0L59C8YWNkhkyh51PVeIA4wNI8ldByd3nMbJ3QcQUVCpdjk/
      X88hRNk+wsmdZ3By7yEkMKGduu3x+aUWleRM7+DUzrM4eeAo0mqYZUbAG1Op6IGP7nWc3nUW
      pw6fRG5jh5AZQDHaAZenF3GGdk4fP4eSth4h9RkdboHtvbM4u+sMTpw8v8AMwHSZMlLXJOir
      pOCl4D5ASoogH327yZWUvIboCNKGWPU3fk/67vCI+ic3YhxgTKXgpion6yGlBhUxYKRnKrhJ
      lNpCai8plak4O2RQvbMjtZkoO6OEp7+1M6RKkyRkE8x2G+WYkuwM8YBCaH0Is5fs8POpA8zB
      hZfy/1JHNjQ0qAbpUpZjxfZb6PjHHzlPgpoodPultw+d7NNIsBQMW+qPtBmXAi0SQWepy7Ji
      /9PxIA381tbWL75vmIFoBQqxBBH4L97kVwuFeL9nJBGmpopi5BbVUaudSeva6xFFhYKkzCIC
      vMZQQ1WvECpxldS1Y3SoG4kx4QiLjEfXO/0cdXpZFBiulUoRtm8MYG1uiXpmHRF1NWSkwIZ2
      bKjZ39IvKpncLGqS4mBNO3bU2G9nwE3IxRVBRUyEyo4kYd7D/aAIB5CUu4uZPNyKdhyd3dBP
      sSwRl8QKzAvyU9lxcHabfwaQpCti3azx0jKYUhZj1FkxQ0x6PtzszJCQwWwmpraU26CGjYkd
      Wpn+p5KphIKdTZnE4NeLNs0L2Psd0oi/2FhTchjf/gmXf7qKuxpr8NSu6Bdv+V1fmBhi4GgP
      bp+4gWubvscbzzlRq9/1tHlvmqXm/t2jmnh09jbOrV9LtbimxTXw7mkzo524sncLXl66g+Nr
      18EtRgwfYGq4Gac1N+DNVW0cYLAyME3MC2q8vwaHN/8Asxt3sP2b9b+SEEN2WGyAI9wDwmBO
      oalAZklxouBRWBSzmD/UQcvgBDrrCqFLkaPIrNpfrVr2hzrAAAkxq7Rga1sBP6dD0NYWRIhh
      wO3+f2tS4awaTmZ78UJHECGGujvX/k0LIcE1MHu9h6JQgggx9STE/PMOxMfW4NWDH2FrJ8YB
      JstJiPnH3dQ4qsb96z/C00uMA4zlkxDzDwdRkFuOiye15ncAiQtakRSKJwYu6KUevay3lVqV
      AXhjZMKMJQNoqiqEn7s9zB0C0dbeQhmTMkT7O8I/nuKwar6LhCyBpgZhor0JFw68wO3Na/HM
      QdAMMNkDnYtrcePoK1zesAaGPoJmgPE2Qge+w/1T+jizbi2sQwXNAIp6XNv/Vzw7Z4Aja9bB
      Pb5TyBJoaqQCZ3b8BbqXDLBv9QYEZYhxgPGBAhzZ8hcYXdGDxl8XmAGkJVBWfATcmVSuhqrC
      g93Uu6TycgVJ3tNcR9WV5SGGM0HnwAjl5tqQwHVidFwKlbrUT2QgxAGoItlemApncwfCFBzR
      1NuvppvOd/s0mhlBd6IdJ6Y3auPZuZhrCvWUO3SkHReumbsIhhNyzU6iOjFcZcfNzRO9jAOJ
      2QOMoywmGA604+7pg0HuM0Vcs9NKFPFFLtlx8/RbOQUS0chf+zNFOMBStNlnCTFSdval/kjn
      /1KgRaU7tAzKs1KGD8eEFKWdy9/wJbcNyUYrhBhR8IGv+bmioBB/dJv9AiFmjJkOR4n7eIvu
      lH4eHOjH0DvihZRtsb9/4Gds0BjfClKmwtFFwL4IwwJJZe7rRV9fv1gsEDEtfdQ07e8Xa2eU
      7f03OwKxQLKhd3YGhGKB5MQASfWRcDoisUByYtwkOxwHC6BBRwYQ5+vGJAZxTGevQHFaJCx5
      9GnjxETSDIOH+7pQI9+CUt2pJMwo0F5bAl29lyis71IblCXGARSId7HAsW3bcVxrF0LzKtQu
      5+ffWKMItzbA8e3bcWzXXsRKaX8EoDTHlHL4Gz3Hie2aOLbnIFKqRKFBR+Dx8gFOamriOFGn
      2Q2C0KDyITg8uolTmlo4fvgUipjMQkS7jVLdxOL2JZzR0sSRI2fmdwDl6AjyInwZCAvAIAkx
      rkznk1pcB18HI/gw55SRgQ1qGytgrKOH3MJCeLl54Onz20gtV78jhDjAQCde7NPEy8fusLih
      iVtPBfEBeltwR3MrTF57Qf+8Bo+RBfEBOutwadNm2Bv74skJDehZqA9D/9yAUzDv2cm1VIaz
      8sPtgxqwdBHEB6gvoI4SleEc/HDhx21w9RfEB6jKxJ6/bEGEmw8DYpsX3gM05SXBwJaUSC5/
      8pPDYGFpiQf3biOcEWFJGc7Cwog8gGcUyHLC02evcPLoblj7JUOu5htPiAP0tOE56YMmRmlw
      1icj7K4gB2hvwJ3Vm2BvkwnLp2SEvRDkAM1VuPSXTXzxZEPvjkBGWG0RTv7XZoT45eDxJS1Y
      2AhygLIs/PRvGkzol42bJ7Xg4iHIAQqSsPdPWkiNycDpfQswwka5BIr1sMFVbT2UkgTR1VLN
      RvCkMpw32noGUMEsKO7ODlSGS8MgcSgDfT1wdzRAesUynQGU/XB/cwR71p7AQSq2WUUXCpli
      x5TdsHm2Dwd+OIV9q9bCJVnMUkupaIex9k4c3nAGu1evh0+WmKWWcrQJry5vw/FNZ7FrzWaE
      FYniBNfi0anNOLX5LLRIXY2vEMUJLsftnzbg7JbT2LRu20JLoGE0UBmuuKQMHRzwQ/3MJEhl
      uJ5+qimQLNPZ2khluEbI5ggwEqufymtDy5gQI+tsQ1lxsUpJbZAbSBFrTOmZQ4yMl1IRQlLN
      kJFMIsrOQGuTyk55eQWJSOpTUT9fTiX6mxtRQjsVVGwbEagK0ddYr7IjpUkVpwqhQE99LYpV
      dmpWjkFFDc6v+blf7TGoBEGQyChL/ZGCK3PKY0tdlhX7n44HybklQsyX3jYMuK5AIZYiBP+l
      2/xqoRAfdAxng1HZALoojS7lvBgfHUJlWQka2rpVqZAGeapSwv2BpAY9yazqlUWFyGM+1mZ+
      X91LDBgOGO1oQx65DLk5uRhm7ELUNdLazLScGcjLzYdcELFDKruMynA5tJPPdleQpijk4jgY
      bKhV2Smgot7YhCh16Fn01TKFKe1IKuPjhMMIuTh2e6orVHYKihZIkzpNGZEgJjzWsw7DOPkA
      CcHO8PAPhq2VFfO/VsCF2dKDg/1hQ2W4prpcPLv9CP6h0agmclTdS4gDzI7DWfcmFds0cGzV
      NzANF5UfQAmLR+dxZON2KtCtgkNirbrN8dn7Z6fl0L9+DKe2aPG0aQ28MkXlB5Dh2dkDOL9t
      B35kHoKQwi4haNCpsX5oH9mFy9t3QIunTXGVgvIDjHbh6t5tzK6zA5tWfxQH+LClmRS6KBXG
      jswQMznGpMqmiEorgLutIfyiY2FlbI2CklwY8vy/sqEenrY2jBSbI6W4Qe0OF+IAUoaYdZqw
      tiqEj7XgDDHfboe7awkcDJgh5qUgQkxHI66ReBPkzwwxT5khxlgQIaaxCmf/XROxkcwQc5sZ
      YuwFEWLILzkqKbYlluLeJWaI8RbDBxgrzsSBf9nLlUARLhxZIEMMKf9oK0yBoV0IFNyU9khx
      gABvvHj+DLm1bajIT4OXizV0dG3RNUCNIB73FSUHwCkkSbpVrUuIAyj7oHtyPV7c84HZOS3c
      0xXECKPA08MDVIZ7HsCcZBqMpAtygOEmXN/5Paz1gvHogAaMnQQ5wEA1zm35Dq4mIbj5owbs
      /QQ5QHcxjq5fDV/LEJzX3AbvCEEO0JaF/d+vRahdEH76YcsCnGAugSKZ7fDBU0MU1nWgt7UK
      vp7uiMtgVkiuN0tzEkko8EVJbTsG2pmm3t0JTi6eqGlTf+oS4gCYQH6wBa4evoarJ84irbpZ
      LSed/+ZxZHgZ0s51XD19AblNHWLszCqQ6PgK145cx7Vzl1Hcrv7S83MFnZ2RI8ryKe3cwPVL
      11HZMyRkCTQzLUOw0QNcZ31uXL+DehKtRFwzk/3wea1NOxwH1+4sdAo0S10eacMzqdr0zvIj
      JWuYefd6l1hhkyrdHuar4n+m+LepKUk/Qv1LjAOwnFQemJRyHbOsIvP3znLG/LrssK/fazdR
      p0BS3mNVLupJQRvgd0Nzzg5tfeoAy+FsdyUOsPSxmIXGwZww1nIYK+qU4ZM4gPSw5SB3JwVa
      pAwxK9KIn5cmXOo+mosEL3U51LX/iTTiSook9RJ7fM3wh/fr9tVCId53AMXoMEqzUhCfUsRg
      Djmg1UXw8XBDCOXR+8jYyU+LpUqAB+XRq8kaG0JhZiJ8vINQ29arNvhLCByas0pFQjRe37uL
      V0+fo6ihWe1yzjfgiyND8Oou7Tx/ifKWdjF22Cd5wX54STu6L3VR3dEtyI4CmT4eeMl209N7
      gwYq6olwAIlxmMKDFMmOgaGJSlFPxAtFSYXwOEdblR19I7P5wXAKwqFj3Gzw3NSPCE8ZvBze
      IJo8AFcmxQiLi4fpGyvkF2bCWM8M6SnRePriFXyDI9HU2a92wYU4wEgvNWf24NrJu3i4cx3u
      mwjiA8g68fAEj1nPP8CtbWvw0k4QH0BK9XNgK55ffYKLm9fB2L1a7Xb/LCGmrx7ndmyE/q2n
      OLX+B9gFCeIDdFXi2JYfYHr3KQ6t3QivaDF8AFlrEZOlU0fpwRNofvuRLtDHS6A5QswQ2WEx
      /g6wc/WC3ouH8ItNgoOZKbx83fHozhN4ulrBwMoFwZ72sPGNxSjD/+p4rxAHIBT6+bfbSOIp
      hIftfty6JcgBmFT6zn9to1ZPMWwNf8STp4IcoJ6EmD9tg79fKQyf7yIdVRAjrIKEmH/SRGR4
      KZ6Tf2BhKcgBCkmI+YedSEoowZ3LO+HiKsYBhjKTsO//7kVWegHOHf0FPkBOuDe0n1uhiXyA
      nrZ6RAR6q6anypZuiuPmwNPJWqUMl5cWDlNbN0QHe8DOL44OoB5BW4gDMARucnczjmndwYW1
      3+GZU45aTjqvg8vboHN5Hc7uvoeTq1fhjU+JEDvK4UbcO/kdru5/iMOrVsMqVNAMMFSFawe+
      IYnkMfZ9uwaucU1ClkDy/mKc3flnPDjyGDu//QEBaWKWjrLuHBzd+mc8Pf4QG/+8buElUFZi
      DHz9Q1FJRlh3Wx0SuPSpqG/l6Ywc1aV5iE/OQHvPIDN7cE+QmYLYhBSyxdRfuwlxgDEF2ooy
      4ePsCW9PbzRS0FedWWr+exVoykuFN+34ePmitUf9PdF85Pv6rER40Y6vrz86qNAhpD4k39ek
      xqns+PsHoZtKdyL2AGOKEVQkRvGl6onAoBD0CkovqxyVoSQuQmUnIDhshRAjZNCoyYle7mUS
      4gBL0Gaf6AKpIrqMxi31R4rUSomYpXPepS7Liv1Px4MUn5nL4PMlt89nI8HqAxnUf4IoKIT6
      JVt5gtQCoqAQf3TrfqIN+nEBZoj3GRufUOF7ZpgxRsoaKVeOq/49Oa5UZQ0cn5zG1MQY1bz6
      VUpocoX6qr6iHGB6jGVmGQcGBlW4JVHXFEUDBiQ7zBIpwTpEXVM8O5fsSP0g4bVEXZPMAir1
      rZS9UTopFOUAEzyjf2tH9jPmbNHrxFXOhErVUNVuC2WIkSPOxxn2XomYIIisJJ2Jse0dYO/s
      heaODoT7uDJljj18wlPQ3lyNQF8PmBq8hH1wKqbVRMSJcYBpxDKDzdEtW3Fs63YE5YkhqgBT
      CLF8TRsaOEoSSXSZINQpZct9DB7hhMY2HNHag6SazkUfK9IDZ2fG4fLsNk5RUe/IrgPIbu4T
      4gAzUwpY37uCM1TUO7zvKIo6ZELqMzUxDOPrZ3COdg7uP75QgowpVKVE4I19GJSTSng5GiKr
      sgVBruYIiI6GhYkjWtrrYP76DVqHiBgdH0EwE2bk1arfEUIcQN6PV7u1YKQbBqdHu6H9VBAf
      YKgL97dtg61ZJMxu7cCLN4L4AP0tuLZ+KzzsY/D6ohYMrQTxATprceb7LUyRFcsAnyZs3QTx
      AVrKcOQbDUQzjnT9kBY8AwXxAWpzse/P25EcHEUZxo/iAB+7XFdpBkycIjA+O43qgmTY2dng
      0YN7SCisREKIF2ysTfDggT46R5hQrzgZTr4xUE6pPxULcYBhMsK2bYGZcQbcdPdB+5EgBxhg
      iqQNm+Fkmw3rx7vwggEqEddsD1Mkrd4MH7dcGNzaBUNzQQ7QVokzf92McP88PL24A7bOghyg
      oRBH/lsDCWG5uHViJzz9BTlAZQb2/6cWMmKycHbv9l9YAnnZ4fo9fVS0ULG3swFhZIR5BkRg
      QK5ATXEWvIgNik4r5mmNHBH+XsS9LE7WFSEOgFEEW12gYttJHGao3S2tUsS45JphGJ4GJ/DT
      htM4uG4zAvLFDMzZmQE4PP0JRzedwf4NGogobRdSn9npHphr78UJKrbt3aSFpNoeIUug6cl2
      6F/ZhdNbzmKPxm5kNasvrvC5Bpkca8Tz05o4t/U0NLfuXThHWG9nO4+7WiGTj2FcOYKO9g6M
      jk1IDBgMM+lcR3cfJqclssy0KjgyPaPm4v9dicU4ADfulC1va26ipk2biugj6pqQDaKVCT4k
      OyLJHeODA2ihnba2dtVxsahrbKBPZaed/S9t6oVsgjmmlJSub6adjo5OcZt6Se2kt/udna4V
      XSBRg+Zrfq4QB1iCBvvkGHTuiEuq4FJ+pABYQ0ODKknCUpZjxfbnx4Gc+qBzKay+5DZixH0F
      CrHcYQfLsXxfLRTiAzg0gzndbc2oqSP4jTiNwZ52qoOlo7iiXqXc29pQibS0DCrF9UA+PIjS
      ghykZ+Whe0B9NWQxYLgx9FDtOpbJPWKiY9DR2ycGPMa26qwoQ0xYKGJj4tAtCqRGO+2lRYim
      nbi4BPQyGCbEWSQyVGG+yk5CQhL6CVIT4gC005iXgyjaSUxKYVKWETH1IYyjLjtzzs4CKZJk
      PfAx03tLiGGELszTCu7+IbA0NUZabi5sTMwQEuIPUwsX5KTFQNfYEq62zB4TkwelmsAmIQ6g
      GILlk/M4sIEpeL79C1775Ilp4NEB6N88hqObd+Knb/4Ks9BSIXaU8l48Pb8fp7f9iL3fUIGO
      mdxFOIBiuBN3ju7EBa3d2PUNFejSBMGhB1tweZ8Gru7cg+2r1iMkt0NIfYb7GnBaayNu/bgb
      6z9OlP0xIaYxN1GVIWZILoOvkxH8IpNga/wSnmERMNU3QVJaPF49eIbk5Dg8fvIUei9fIDRV
      /Q4X4gBdJMR8tw3m5nlwtyIh5rYgQkwrCTH/owFnp0LY6AsmxPz7Nvj5FuPNUxJi9AURYipJ
      iPmX7YgIK6L8pUBCTBEJMf+0A4lxhbh9QSAhJpuEmH/cg8zUPJw9vAAhRkqCUZMejZdm3ujj
      pqejoQJBZIA9ffoU2ZVMzJCbAjcHczzXteF07wFbL05doe6w9I5enowwWQdenl6He1fs8Orw
      FmjrCXKAwSbcO7QaL+444tHejXhuIYgR1leDqz+ScPPIFTd3bsQbR0EO0F2K0xrfwPK5Gy5q
      bIK1jyBGWFsus918A4fXbsxGsxnuYYIYYY2p2LdmFdwNXLB39YaFl0AhLjZ4/OwNsssb0VZX
      DA8XZ8SRSjZMMFF+agyc3bxRXN2CzqZKuDvZwc7RFYX8t7pTsZAZYEyO/BB73Dp1C7cuXkV6
      Vb3a5fx8PYdJIrfArdO0c/kGcusFke+VMiS7GtHObdy+fhvFzWKWDEolU2XZ6ansaN+6hwqS
      70XsAZSjvQg311HZuXfvEeq61eeWf5bjPNKFAMOnuM3+uXPv6cKnQBLuW/pIA1L6vP35Ld9X
      yRlC+vecEeW776o7+N8+W6nSBRrlZnsxnvfzM97V4f1yL+rz5/Y+f5CduT4RXZ+5vp6zI8IB
      VP3+bgwJr887OzzO/dQBlsO57kocYGnjML80BqQX01cZB1iCYNxnTYqCQiyX+n3p5fhqI8Gf
      65j3pc6lgfmzqOy7n+fQPx/8Tc0eFuYAUpkloV919dt/qX5fuR1hDvAuR53o/pnLhUdc0/xY
      oJkpSqBnJCImqRhTszNoZ8JkTzcXBEYmUyhrhJvgaLi6uCK1oBpDvW0I9feEh08QmnuGf2l4
      /OLfxTjALCpiw/Ho8iU8vHUHBc1i0JNECqIo1F9l55H2fZR19PxifX/XF9gnOX4etHMZj+8/
      Qg2la0Rcs4TCp7k7qOw8ffwMjQx0inCAWbIPExysVHaePX+FtuFREdXBzNQEoqxM3trR0V3A
      AUiCSQ9wxWvrEFWGGF9nY6QW1zAeYI7IpCQGxBxQU18G8zfmiKAekGdEKnIT/OAUmrI8E2SM
      y6B/cQ8eXNGF7k+b8cC4SEgDgwm5Hx/bwWwqBnjMY9DX9oL4AKOduMnAkdFDI9zesQmmHmJg
      19OyFgbBePz53ASXeAzqGCyID9Bfh+ObN8DplQlObtoC3zhBfICuMkLiN8BT3xj7Vm9aGA06
      R4gZIx84PcobDm5e0Nd5jNC0bHjZW8PLxw1P7+sgNS0RVrYOcLQ2gIlX1PJ0gEESYlaT0WRT
      Bj/7Q9C+K4gQQ8jIfTKOPD0q4WSyFy90BDlAGwkx/6GJkKBqmOnsgaGRIAcg5OXsv2ohPqYK
      r+79CFs7QQ5QyRRJ//QjMlIrcf/qj/D0EuQABRk48I/7UZBThovHtRZeAuVH+uDuC2u0MVvH
      cF8bYsP9YW5lj5beYTRVFcHP3RFOPjEYlg8hmyJatlbmSF8EDqyQJdCMDDbPNHFk6w2cWf0d
      9PyKxcwA0314c3sT6Xa3cey772AZUSPEzuxkJ55fWIeLu+7i0Krv4Zwohns8M96Mu8dW4/qe
      e9izai38sjqFLIGmFLW4sv9b3Nl/Dzu+24CIosUhV33c+BMjpTiz4xs8OKCNjd98FAh7/8sz
      XAKV52UhLj4FLd1UAxvoZHrRHLRKaVNJgGmrr0ROYSmGRscxOTbCyHAOKqkaJxFk1L2EOADX
      5oN8m8WFRREMF4u+YTEpeKQ9QF9NKUF3UYiLjcegXMxaljod6KFuZwztxMcnQqZQqtvsn7+f
      e4DOkjyVnYTEZIyMjQtxAMxOMSddNkF3UUhKToNCEGFpdmYSzXmZ7+ykrhBixIyar/upIjbB
      S9FinxBipDevpMq21B+pgSVlOCk6uNRlWbH/6XiYU4b70tuGAdcVQowQKISacPDlXiZRUIg/
      ut6faIO+D4eWMnZ0d7Sipa2Tam/EATFHQHtrMzp7+lV4oOHBfpU+5MDQiAoX1EMCfeu776pb
      EVFYIDlJ103EGDU2vsW0q1vO+e4f6e1Bo2SnqRkSfVCUneGeLpWdJtpZdNzUe04s6+pEA+00
      N7fQjkIIGG6Mqn1DnR0qOy0tkgL533Bmi9p+xGkNdrSrsGa0M/8M0F5fAic7O5ibmCIurxKF
      qRGwsraBhbUDqhqbEeLpABsbGzh5R6K+qgA2VlawtrRAcmHt8iTEEA0aYKGDfevW4+DaH+Ca
      LEa3f4wHAu5691VnzfvXbeSpiRiYslI5DLsn1ym/sgl7N2xFWGGDEEdTKgZhduc8jm7chD2b
      tRBX0SrEAUZH+qB3+bgKCr17226k1XYJqY9c1oVnpw/h1KZN0NT4SBbl/RlgiLInnZ1diPSy
      Z1AiC64OJsisakW4hyV8IyJgYWyP1s5GWL02gB8lFL2iM1GRHQEz8gLmEKO/13OFzAC9HXhO
      xbY3upR4fPYjbt0XxAfobMIdKrbZmMXAVFsLT14J4gO01uDS6i1wsycp6aomGXliHE3RUIoT
      f92CAPd4PKCejoW9ID5AVS4O/fdWRPrF49phTbh4CeIDFKdhL+MniSExOLFj6wJ8APJ8sxPC
      4eIZgvbuXrg7miKT0ohhdAC/yEhY0gFa3jmAv68LPOkA5VnhMPemlOJyTJHEOMZzrQ3QfxUN
      20e7cOuhIAfoIiNs0w+wMo6H8U1NPHktyAHamCKJM5mLTRJ0Lm6HrqkgB2gswglmbPFzScK9
      E9th4SDIAaqzcejPGxDmnYQrB+kA3oIcoDQJe/5rC+IC4nF8+5b5HaCxJBm3r1yHua0jM0FW
      oigtGtbW1rC0cUINxbLC+daX/u3sG42GmiLYWXMJZGFJuET9Ml0CDSLE+jo5wce4bNCAZ5r6
      1M3Pz3D98DY8j0MbT+Dgxm0IyhWTukip7IazDlXuNp3EgS07EFXy9tRssT9KRTus7x9mArtT
      2M+lSVJVm5AlkELeDOMb+3Fiy0ns33kAWQ2ilkB1eHVhD05tPYFdOw7O7wDy4SFuerkJbmlB
      b/8QN8FydHOj28P0lRLpfYTqZ5JS2NAwN3ncBPdzQ9bZ1YNRbpjV7QQhSyCWeZRKam2sT1tb
      m9DNqZzS22/ttAvdnI5wU99KO1I/SJtTddt9oU29yg5VwaXNqahToOGeblV9JGU4kZtgWXeX
      alzTzqcOoG727cW4X+qIlUzxyzNLvNS/0snWXAafxejvpXrGJ5nipWjcHK5/Kf8vbcbnUvAs
      ZTlWbL/lf3z8kQZsK1cHX3r7LMgHWIrQ9JxNMVigpazR12X7q4VCvN9NkzxnLs7JQGpGPgYJ
      eFPKepGTnoL8sjpMML1Qd0st9YBSUN/eRyXfaeYRrkNdc6faUOi5WUhaoy12eqF+KsOF+foQ
      QhyCbqbhEXV1l5cg1McHoSFh6BuRizKDjuIChNBOeHgE+0ghxg5ngNb8bATTTkRkNGQ84RPi
      ACT4NGZnqOxEUVFPztRcIi5JybyO4zhIshMbPz8Yrre1ClHRcfB3tkFAchGSwpiPNiwWzraW
      yC2vgLutNWLjY3gS5IEebi4D7V7AiMk0FiE/hmpqXXQHmFbA6vEZHn0dxIU13+C1lyA49JQc
      +jcO49zOn5go+1uYh1SL6EfMTg7hydk9uLL3KI58t5rKcE1C7MyM9eHOYS3cPnAM+wmH9kkT
      BIcmwefSni148NNx7CIcOixfDBx6XNaMU9s34OmRY9j8sTLc+y04TYra6FAP/F0ckFZSB3cX
      M5S2DiIh0BE+kRGwNfdgooxeOBq8QfPABFpKouHgGrN8HYCBvVffkRBjWw4/R4GEmG4SYv5H
      k4SYKjiZCibE/LsWQoJrYPZKICGGsPez/7ID8bHVeHVfICGmQiLE7CYhpgr3r4kmxBwgIaYc
      F08sQIgZZaofL3sr5gNLxyAFUcN9HBFHFo2/ixUSsnPgaGmHsqoSWJnYoXtkHFWZATCzDmAC
      DfUTNQiZASb68ebKemhfsITOvs14aCaIETbWhSenvsfT67Z4sHMDdKnYJuKaVTTj9sFV0NN2
      wI1tG2HmLYgRNlyLizu/gdkjR5zfvBFOYYIYYYOMOFOBzvaZE45t2AK/BDGMsPEeRpw3fAsX
      HQfs+W7j/EugnsZiWBiZwNnVDdll9ehtrUWgjydCYlIxzFSolQWp8PDwRHpxLcYoPBvj7wQT
      c1tUNPeq3d9CHIDZG2uS/PHyjg50Hj3jbKZ+Mr/PV3QS5dGeKjsvn+qgukv99visndkJFIa4
      QOfOS7x+8Rr1fWJSCmF2DDm+dtDRfgldwl5aCX4UsQeYnRkl+d6KdnSgb2CMTqbhEnHNTI0g
      wdFMZUfvjckvEGLel0H5FaVZLDkLMQ7wrgKiJVH+dpT1K1psEb7yB9Xn/b4V4QDvnwAuQqv8
      4iPeSaN86ABzeinSOfxSfqTTH0l5TCJcLGU5Vmx/fhxIgUrpkOJLbx/mVVshxIiCD3zNzxUF
      hfij22xBQoxUGAU1ICWihSrhBYkE0s+j74gKEglG+reCv5fIDG+/S/HcRQBkicICSeKrUhhf
      +kg2RDX43+yw7f4IO1IfqYnAXagt5uozR7oR5QASCUvqG5HkHpUIL9tLssN6zD8D9DILvJez
      PayJ/iyub0dTRS6TP1sTphrK9EL9yIoPgZWVNcKT8tAuyaM728LGzhnljd1qDywxDqBEdoAH
      rh45gqunziK5nJv3RXDWT5+hRKqHw1s7Zy8gs6ZJjB2+gOIcLGjnKK5duIL8xnYhdpTKUURY
      GuHa0aO4fuUGSttEyaMPI9DwlcrOzRvaPDwQk8JKMTIEr9dPcZ12rt24O78DdLc3oLyiFjE+
      DnCNSIOPiyXiyQzzdzZDWCKFsIytUFlTBgt9MxSXVaGsphbRHlbwjy1SexYQ4gBD3dA5sQOP
      bhhD//gW3HkliA8w0Ia7BzTw+r45nh3ciGdmgvgAvY24smMzTJ9ZQXv3JhhQgU6EQyu6qnFq
      ywbYvrbGFc3NsPISxAdoLcFPP6yH6xtr2iPRJ0QQH6AhF3u/Xw8fUyvsX/PRMejHnODG8lzY
      2zmhvL4FTvbGyK3rRJS3NTxCgskIc0JHXytsXuuhpn0IdaWZ/K4zatvU91whDiClSPpeA+Zm
      uXA33yc2RdJftsLZkTRR3V148kyQAzSQEPOfW8nGK8KbxzvFpUiiANrJP21DRChTJN1kiiQr
      QQ5QzBRJ/6yFxBimSDrPFElughwghymSGHDLTM7F2Z8WSJHUWpmNR3e04ewTjIq6JiSFesLJ
      0w/W5qbILS2Hm60F/Px9YW7tiZK8JDy4qw1X/3BUNqqfqUSIAyh6YPN8J/avJ7/121Uw8BeU
      JE/RAUNtDRJVLuEgk9dZRpQJeTMrR1vw4vIGnNS4gj3fUBkuQUySPOVIHe6fXItz269i17fr
      4JvZLIQPIB+qwPWD3+GS1lVofrcR4QXqj6PPzYjD/YU4v2sVru+4jPXfLpAiqb+rBRkpKUyF
      moZqri9lAz0oys9BaXUjVSKkFKoNyGFEuKmjF70djUhPTUZaegaqCYhTdyoW4gDcqPfVVyMl
      LhHJTMMpLn2pkulYK5BMOykpqUxfOqh2e3y+PZXoqixFEu2kpqajn+A+ddv9s/dzr9FRRiwY
      7aSnZ2JwWFSaVKbeLSlgkrwEZGRmQ0YQoZD6KJjkuzBXZSc9I2vlGFRIIwvZXC8+3fH31l3U
      KdDvLc/vve+TY1ApECYFoZb6wwDFzyl4lrosK/Y/HQ/SDD2H1v2S24eB1hVt0F+Mma984ZMW
      EAmF+COb+xNt0PeNzzAnQG9nG1rbuzFBxedpJsnoaGvh2lmGGc4UY5REl5TChhXj/Ns4Ovk3
      1XcXgRAgCgs0MTSIxrpaNDRQQUEQ4UJqw/GBfjTU1qoU6CYEqRxLdsZIipfsSMpwk5Pqo3Dn
      G3yK3m7U047U31MkQwlxAI6p0e5OlR1JGW6xyVA/1412RqhAV6ey0zb/DNDXWgEvdw84UPEt
      vqAWxWmRcHRxZ4IER9S2tCPUywnu7m5wpjJcF2MG4WEhcLI2Q3JBEwXC1buEOMDsJPzNn+IA
      1doOf78GjkmV6hVyvruJ0nTRvYOf1m/GwTU/wCe7QYid2RklrB9dxrGNW6hAtwkhRW1i7EyP
      wujmaZzavBV71msgrqpHiANMT8qgc+Ewzm7RwI+bdyK9UQy6dXKsHw9P7MWFrVuxbePO+R1g
      nBHAYdkQYn2dEZZeDE9XCxQ29SHO3wEBsUyGYe6GXgaXHAhdbekfQx8jx3ZMQBxCQsOydABZ
      H15tpbKZaRo83uyH9gNBfID+Dtxftw3O9pnEtv+IF7qC+ADdTbi2ahv8PHN47LoLhmaC+ACt
      1Tj7522IDMrBs8s7YeskiA9QX4wj/6mJpKhs3Dm1E56+YvgAY+VZ2P/vu5CVkIlz+zXnd4BJ
      amlmx4fBJziOR19yZoOxfhsI87FFKCPBdhbO6GRyPLs3ZmjqGUF/dxvCvKzhn1C4PB2Amchf
      7dsIg5fRsGeqH+3nghxARgfQWg9ro3iYXNPCCyNBDjDQiGtUoHO1TsTLs1owtBHkAN1VOLN2
      HREASbh/lIw6D0EO0FqEI6vWI8IzCVf3k1EXLMgB6jOx76+bkUAJxhPbNOZ3gI6qTNy7eRvm
      Ng7ILKlFbVE67G1tYe/ig/beASSH+1Ac15YyiRloZbI8Tzcn2NnZI4/KYepeQpZAGEOS+xMc
      33YaJzR3I7yoTt1iznO/ApG22jixnfzjHXsRTzlJIdfsCAKNr+Gk5lkc//Eg0uq7xJiZGYLn
      yws4rXUWx/YdQV5rv5Al0MwU6bWPTuMM7Rz/6STKusWIFkxPdMLy9nGc0zqDI4dPz+8A00wn
      OSyTYWhoiNieCVVapFH5CBT8WVriSBvfEaYZkhQiZsgflo8wQEIWj7RBVvcS4wBMKkQ9m2HW
      R8ZgjrBNltQ2jANIdoYlO+RWiLqmGdyTqeyMqLD5oq4pBsMkO9L5/8zMrBAHkMo+STToWzty
      gbmcmQTmnR32z6cOsBzEjlaEsT4vSLUc+kYqw1crjCUNvKWSqXvfrhTZa2hoUOlDLofyrJTh
      Q5lGCUsvMfa+9Hb5RBrxfTTo7w0vL8Z9YrBAywdKsBhttJTP+GqhEO87gGygC6lxUQiPSkBb
      zyD6mAsgLjIMiRkFGOIarb4iH6GhYSiqauK+gGrRgz0EmSWgpWdIbRCTKAdoysuGC7PYONk7
      oo4KxKIGUX1mGpxox9nRGY3dPcLsVKckquy4urihlSQlIfUh7KGcAmiOtOPm7omOgUEhaFCJ
      dVYcHa6y4+Hlq1LuE1EfiQ2WHx78tj6efvOD4drqSxEdk0ARKUt4RGUiwpeCWOHxcLQyQVJu
      HuzNzBCfGAtTEybK6OpCYqgfrty4gDSm0FG34EIcYLQfhrcP49SuE7i8/ls8sc9Ru5yfredI
      D55Rf/7ivlM4u+Zb6HuKScWkHO6E9jEt3PyJpzNM/G0RKCYPgWKwBZf3bcG9Y+dwYNUaOEe/
      za82l8VT3b6eu1/eV8eTpvV4cvI8flzFhBwpYhhusq5KHN68Fi/PnMOmP6+b3wEU3Cn3Eebs
      RhpkSmEVHO2NkPeOEOMeFERCDOMA/STEvHwJb3dnvNQ1wZ2bZ+ATX0BxLPWWG0IcgLCO599s
      g4VFITxs9+PWLUGMsBZmiPnPbXBxLoGt0Y948lQQIaaOhJg/bYe/XxkMX+yCrp4gRhiTcZ/8
      J01Ehpfi+V0SYiwFEWIKSIj5h51ISijBHQbcXFwFEWIySYj5v/uQlV6Ac8cWIMT0MgJobaTP
      gEQc2jq7CX2wQ3BCBh3CBHEZjHKamiMjOw2mb6xQWFqK1OREPLl/Af6JRaolkTpvBiEOMNIJ
      /as/4NKR19Devg4PzAXNAMMteHxqNW6f0sfVzWvw2kmQAwzV4eahb/HovCHOrl8LE29BDtBf
      jgu7/gKdK8Y4xoCYQ6ggB+guwHGNP8PgujH2f78B3nFiHEDWnoGDG/4C09uG2PbXBWaAttpC
      RnstSU1zR0ZRNTqbqhHs542w2DSSL4ZRUZAGL09v/q2GyhBk2nMNV5CbhMauAbUGv4q1z3Wn
      lCBjcdUBRlGTEgajZ29gqGuAMqZ5UsdJ5793FOVxATCU7OgboapNDLNpTDmCoghvvKEdY0MT
      1DM7j5D6UCU8L8hdZcfU1ALN3GuIWAIpqS6Y6euksmNuYYM27jVE1EcpH0CKhz0MnhnAzMJm
      hRAjopG/9meKcIClaLPPEmIkNbal/khw27lN1lKXZcX+p+NBis9IGXy+9LZhHGOFECMKPvA1
      P1cIH2AJGmxBQoyU6mWSb+JxEjokeM8sM3hMEEszSeyPdEn4HykSKGFd3v7t7cZ37u/q1EcU
      FmiWVMu5qVbCtIi6Zn62My4Q08I+4Gwt1Ufqh8USJv5cm3xsR5QDzExO/CH1mea4frvXHJt/
      BpD1NMLbxRE2tk4oaWL6yqo8BpBsqQwXwowwwyplOFsbO4Ql5aOf4klmL1/D1tEFGWVNao8r
      MQ4wgyx/V5zfQzLEwcNIrBADH+awRLKrNS7s3Yvzh48jg6p6Qq7ZaUTbGNPOPlw4fhr5LT1i
      zMxMIsTkNeMatHPqAsq6BoWA4Wamx+Gj+wSXaOfi+auo6R8RUp/pSQVcn97F5f37cP78tfkd
      YHigGy1tnUgJcoNPXC78PWxUmeLDvWwRQbkUOwtHZopvgq2hBSqqCqD74Bm8AsLR3KM+jFWI
      AygH8froTrx65AzLy5q4+0oQH0Degwd7t8P0pTv0T2tAx1wQH0DWhmvbt8Le0IvpfrbBiBnc
      RVzTfQ04u2kzPC28cXufBux8BPEBOitxZO1mptryZkKO7fAKF8QHaCnEvu+2IMLZE0c2bp3f
      AWZnptBSkceAhDeaqNMoMcKKW/oRH+AA/+goOoA7+od7yAgzQiMJMT0dbUgOI0UyNEXtRHlC
      HGCIhJj122BlWQBv8wPQvi/IAXqZIuk7Dbi5FMNedw9evBLkAJ0NuPZnDQT6lcL48W4Ymghy
      AOq+nv2PbYhhIEzn5i7YOghygBqmSPo3LaTGl+Du+V3w9BHkACUZOPCvu5GbRoGsnxZghHXV
      5eGR9j24+YWiuqkdOfFBcKUynB1JMOX1TfB3tVMpw9m6BKGlsYawiSh4OdkiJmeZUiJJIHF/
      cxAHfjhH5tH3sIwuE/HC5GZpEDZPf8ThjRdwkNABlxQxxJvZ6R4Y3d6OE5sv8Y32A3xzxBBv
      ZibboXNxM85svYwfv6diWwmFD7iGbmtTn/j0fgdMjzfhwYn1uLDtMnas00BizYCQ/plUVOPG
      wXW4sv0iNn+/wAygHOlHeXExSkpKVWC4ibFRKhBUoZlKcNPcQMoJfquqrEKfbBQTSoLjmIK0
      tqEV48tYFULZ04HSgkKUFJdilME2MRfVDQi7KKGd0pIyRsXHxZghLWmkvRnFtFNWVo4xDkox
      1yyGWxpVdsrLKzHOjbcIBwAPUgab6lFEOxWV1YtymPLZ9uDeqb+hVmWnsqp65RhUzKD5up8q
      xAGWoMk+OQaV1t5S5Zb6Ix3rSYEwCRKx1GVZsf/peJAgKlIg7EtvGx6FrkAhliIE/6Xb/Gqh
      EO8TYhTyYTRUV6CMSTKGRphSRjaAqvJS1HJDLKVFkmRQpP1BR8+A6k3dR/390pJy9AwMqw1i
      EgOGG8MQ1esKcrKRn1+AgUH1iTvzDeSB5kbk004B15mDFBYQNeD7GutVdgoLi0n0HxFmp7e+
      Fnm0U1RcgmGSoYQ4AMdQd2018rKzOa7KKLAwKqY+JPh3Vlcil3aKiksXIMQQDerOHMF2ZiYI
      TStGRgxPgJzcYGFuSRZYDbwdrcgQcoWVoz8a6spgb2MJn4AINHWqz0wS4gBENTrr3saeNRtw
      6Bsmfg4vENTAMlg+ukgFuk3YxzwEDvHcoKoJD//c/UrFAAxunsQRJpXezdMmz/Q6MXbkvXh+
      /hBObNqKnavXIzi/RYgDjMo6SbrZjTNUoNNcuwUxpWIYeyMDrbhO3aHzW7Zi4/db5neAkeEh
      9Pd0IdjVFsHJ+VQ6M0ZOTTsiKX7lFRpKQowj2ntaYM0MMX6e9tBm8mlzM1NEZZYuzxRJ3e14
      /sM2mBqnwdVoL25pCyLEtDXizioNONplwurFTjx5LogPQHj6pf/ZCh+PHOjf2wFdA0F8gJpi
      nPwPDYQG5uDJ1R2wsBbEByjNxk9/0kRcRDZund4BF3cxfIChvGTs/ZddSIvPwJkDHwljvb8E
      kiLBMYFe8AyMRXdfP7ydzZFSUo8gV3MExcbC0tgGdc3VsNA1YjDGBfZ+sSjPjIShUxBG1MyM
      KGQGGGzHi0M/4PkDX5he0sTt54IcoK8R2rvWkKUViNentuKpoSAH6KYDbF0Na4MQPDy8FXrW
      ghygnQ6wfjVczEJxc+9WWLoJcoDGbBxa/T18rUNxbocGXAMEOUBNMvYw002IQxAObdg0/wzQ
      WJKC+7fuwMTcihzgMlSTAGNrZQk7KsO1kCGWRGU4C3OmSYpKRwcdwdXeBlbEBqUX1y3PGWBs
      GMker8gJPovTew8hkjRPEUuTsbEhRNs/weld53B6PzFH5fVi7Cj7EWJ2F2d+pJ1Dx5Fe0yLE
      jlLZA1/9mzi7+zxOHz2NvKZOIUsgxWgn3J5foZ1zOEPMUUmbGILP6HAr7B5cwPndZ3Hq9MUF
      OMGjcgwxvc8gP8PckEh5gWUUy5U2QdLAUUh/p4qXnLmBpTzBkjLckGz4Xd7gZUiJlNB/1LNR
      1YnlljDtYhyAbUMFPandVKp6as6GC5VRQXL6H2Nn+J0dmao+QjbB7J9RKump6sODA5HtNjos
      U9nh51MHWA5iR1KnrwhjfShGtRz6Za4MX60wlhSMWw7ye9JeRErBI6VKWg7lWSnDh1KNkiNI
      WKAvvV2oD7sChViCCPwXb/KrhUK83zNjI31Iig5DcFgsOgblkPHIMyo0CHFp+SqF6EZCpQMD
      glBY3aJKjhEa5AdPDzfEZVdQIVq9PhYCh2aRWnIyYKWrCwsTM9R196pXyAXurk9LgiXtWJpZ
      orlfTKYTCXNenRDDUzhdWFvaoJ1KHUIu2imLClPZsbGxRzeDoiIcYJbq44WhgTCnHTsHZ/Qr
      xIAVJVZgToC3yo6tg/P8M0B/Rz0ys/N57k9FuPg8RAU4IzwlB15UikstKICzlQ1y8rNhbcaM
      8QMydBKZGOxigYDk4uWZIGNyBMa3DuHKkeu4v30tntgUCRkvmBjCi/O7oX3qFq5TF+iNR7UQ
      O7Njvbh7RBNPzmvjwoZ1sAxsEmJnZrQDV/Zuwesr93BiHRNyRIvhA0zJmnBacwMMb9xjaqmN
      CEwVwwcY76+hMtwPsLh9F5rffJQo+/0WnOU6XHrrezo6ooBHbO4uZihtHURCIB0iIgK2Fh4Y
      YJTQUf8NmgcmIOusoee6o2dEffivkBlggISYVVqwta2An9MhaGsLIsQw4Hb/v5nhhAPfyWwv
      XugIIsS0khBDAklIcA3MXu+BoZEgQkw9CTH/vAPxsTV49eBH5ogT4wCT5STE/ONuZKRV4/71
      H+HpJcYBxvJJiPmHg9SwKsfFk1rzzwBDnbWw0NeFb0QyuvoGEBfoipD4dHjYWyC9qBgu1tZI
      z0qDpbkz+pgYI5HiSbG5NWovf+Y24nN5aBfttTY1CNO7m3B+/3Pc2rQWzx0FzQCTPXh5aS2u
      H3mJS+vXwMhH0Aww3ob7J77DvZO6OL12LWxCBc0AigZcP/ANnp7Vw5Hv18E9vlPIEmhqhI62
      8y94dUEP+1ZvQHCmGAcYH6Sjbf0L3lzWhcZf18/vAIMdtfD38kYIFaBLalsx3NeBpNgopOUS
      6kCliNbaUkRFRqOsoQNTEwpUlJdjZGxyUcarkBmAZPWO4nS4WTvDheT9Zjq1mGsaLVTIc6Ud
      V2c3tA+qz5H+fDmn0JgRBxcrZ7i7eaKbedyEXMyuWZscyReeMzw9fdDHuI+YPcA4KuLCuLR2
      hrePP4YEEYlmp5UoiQpS2fH0C1w5BRIyaL7yh4pwgKVoss8SYqTcWUv9kc7/pQwkUkMvdVlW
      7H86HqQo7dwS9UtuHyrbrRBiRMEhvubnioJC/NFt9ok26PtoUAn7MzQ4gH6q9EoEGCXzBQwO
      9BOnMaICu42SMNNPlKiKuMC/y+a+y/NbdSsiBA0q4ZeINenr7UVfXx9GRWKBiDV5a6dfKOZo
      lNis3p/tqN/u8/XbKDFNkp3+/n6hWCD50OA7O29JVuqOo/nulxMH9Lbd+uafAbqaK+BiZw0z
      U0uqvTWgKi+JARdL2Dh6orG9E/HBnkw2YQHvsGQ01hTB1tpSxQdILlCfmCHGARSIJaT72Lbt
      OK61C8G5FYIaeBShVvrMR7wdx3buQTTRsUI6kkocvobPmI9YE8d2H0BSZbMQO0rFMNx07jEf
      Me3sP4LM+g4hYDiFfBD2D28wFqClyhNcSKU7Ee02OtwP81sXmY9YC4c/zhP8/gzQx/PspuY2
      xPo4MEUSjz+dzJBa1ogQNwa7YqLJB7BFY2sdI55GSIqPwJOXb+BsYwJ/ZoiRZgh1Ci/EAQY6
      8ZyKba+eeMLyphZuPRHEB+htwR3NrTDV9YHBBQ080RfEB+iswyUqttmb+uPpCQ3oWYiBdyta
      y3FizSZ42gTgzkENWDgL4gPUF+DQqk0IdArAxd3MsOMniA9QmYk9f9mCSHc/HNm8eSE49AjK
      shPh4OSFBkokujiYIJuMsAhPK771GRpXMcKaVYywyAimTLJ3haeDBVxCU1UJM5adA/QwRdLG
      zUwmkQpnvT24dVeQA3QwRdL3m0gRzYDFYzLCXghygGamSPrrJni5ZkPvNhlhhoIcoJYpkv5r
      M0L8svH4ohYsbAQ5QHkWDv37VsSGZuHGCS24eAhygIIk7P0TFehi0skLWYAR1lSaBu1rN2Hr
      6oX88lpkxQZJ2AlYWlijtKYOfi42cHZxgo1LIGXmImFkZkUnsYZfXM7ydAASSDwMj2Hv2hM4
      9N1aWMcUquWk8zq4sht2z/dTge4UFdvWwTVFzFJLqWiHyd1dOLzhDPYwpZBfthjijXK0GbpX
      uGzcdBa7yNUNLxLECR6uxZPTW3Bq8xns2LAdCZWCOMFD5bhzeCPObjmNLT9sn38GkA30oLKs
      jKpjZWSA9UJOjnADWftNbV2qTfFgXxeqq6rR3U9yyegIWqi2VVPXCNkisPmFLIG4LBvu6kAF
      85mVl1eoyDvqzFIL3SujTmo57VRUVApVaxikykU5lTkqqdA38o6otPh1UmKgpQlltFPF/paz
      f4WcAknKIk0NKjvV1bWLnB7rvRUJD3d6qaZRKtmpqV05Bl38AaPe8u9LKI8QB1Bz3/h72u2z
      KZKkjfBSf6TgylwKnqUuy4r9T8eDNNhaW1uXfJyo2zcMuK5AIZYiBP+l2/xqoRDvd8z0pJLn
      +2+V4UbHp6gAPYLq8hJKoXRiSoJK93WqVJa7BkYwPTmGptpKlFc3ECj3NoWSOpcYMBwg59o8
      Nz0NOdk5GCaoS9Q13NqEHNrJzcmDnCdioq4hqiln005enkRSUh+G/tlykhAzUF+jspNPpTsJ
      CCnEAWint6YKWWlpKCTaeHxySkyzcex2V5UzUbZUn6L5Z4CelgoEkPHlbmeFsMwyngIFwM03
      iMd7NkSH1sOXuQCCggNh6+SP/MwYyqV4wYciWhGZ5cuTEDMzDifdGzi0nicaq76FSVipoAZW
      wvzhORzbrImfVq2CfUKtEDuz03LoXT+K0xo7sV+lDCcqP8AQnpzdjwvbd2E38xAEF3QJcYCp
      sT7cObITVxmk3PH9ZsRWiEHrTlB+5cpeDdzcuQubvvsoDvB+T00xYZlieBBhHo6IY9TU3cUc
      JS0DzBDjSC2gSNiaM0PMCAkxBm8QQgEtR99IJEd6wNgzfHlmiBkkIWatJqytiuBjfRDa9wQR
      YqQMMd9sJ0S5FA5vmCHmpSBCDOMN10i8CQooh+kzZogxFkSIaazC2X/TRGxUOV7eYYYYe0GE
      mCri9P+Vim1Jpbh3iRlivMXwAcaKSIj5l33IyyzChSMLEGLG5P2I8vdAQGQqZDxiC/a0RToj
      waHMFRbFacrewoGR4HrYGFmhob0DCZEhMDV4Aa/YvOU5A/ANo3tqPZ7f9YLJWU3c0xPkAKQQ
      PjxIKuRTP7w6qoGXloIcYLgJ13euJsc5EA8PaMCYEVoR1/RANc5t/Q4uRkG4sYs5yfwEOUBP
      MY5Sgc7HIgjntm+Dd6QgB2jLwv41axDMyPZPP3ykDfp+A3bW5ODFw8fUgrRDWlEN2oj3cXW0
      g7tfBPplcuQlR8DO1p7OUMwYQS8ifb0QGBGPvhH117xi9gCTKAixxLUj13D15DkqqTWLGC98
      5jgyvY1wldzjq2cuqpTUhFyzSiQ56bI+13H9/BWUtIsh+c/OyBFj9RzXjtLO5Ruo6hkSsgSa
      nZYhxPgRrtPOzRvaaBgUkyVyZrIffrr3aOcart24O/H/AMtKlJvcm52QAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
